
PolyJam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007038  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007210  08007210  00017210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007228  08007228  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007230  08007230  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007230  08007230  00017230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007234  08007234  00017234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000704  2000000c  08007244  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  08007244  00020710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021c1d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eb3  00000000  00000000  00041c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c48  00000000  00000000  00045b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ac0  00000000  00000000  00047758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026feb  00000000  00000000  00049218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022eba  00000000  00000000  00070203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f21de  00000000  00000000  000930bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018529b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007af8  00000000  00000000  001852ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080071f8 	.word	0x080071f8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080071f8 	.word	0x080071f8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f001 fb7c 	bl	8001c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f828 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 fb02 	bl	8000b30 <MX_GPIO_Init>
  MX_ADC1_Init();
 800052c:	f000 f892 	bl	8000654 <MX_ADC1_Init>
  MX_DAC_Init();
 8000530:	f000 f8e2 	bl	80006f8 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000534:	f000 f90a 	bl	800074c <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000538:	f000 f940 	bl	80007bc <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 800053c:	f000 f9a8 	bl	8000890 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 8000540:	f000 fcb0 	bl	8000ea4 <MX_FSMC_Init>
  MX_I2S2_Init();
 8000544:	f000 f9da 	bl	80008fc <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000548:	f000 fa06 	bl	8000958 <MX_QUADSPI_Init>
//  MX_SDIO_SD_Init();
  MX_UART10_Init();
 800054c:	f000 fa9c 	bl	8000a88 <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000550:	f000 fac4 	bl	8000adc <MX_USART6_UART_Init>
//  MX_USB_HOST_Init();
  MX_TIM6_Init();
 8000554:	f000 fa2c 	bl	80009b0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000558:	f000 fa60 	bl	8000a1c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

//  LED3_Init();
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, 1);
 800055c:	2201      	movs	r2, #1
 800055e:	2120      	movs	r1, #32
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <main+0x54>)
 8000562:	f002 fb83 	bl	8002c6c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim7);
 8000566:	4803      	ldr	r0, [pc, #12]	; (8000574 <main+0x58>)
 8000568:	f005 fb4e 	bl	8005c08 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056c:	e7fe      	b.n	800056c <main+0x50>
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000
 8000574:	20000254 	.word	0x20000254

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2234      	movs	r2, #52	; 0x34
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f006 fe2e 	bl	80071e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b2a      	ldr	r3, [pc, #168]	; (800064c <SystemClock_Config+0xd4>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a29      	ldr	r2, [pc, #164]	; (800064c <SystemClock_Config+0xd4>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <SystemClock_Config+0xd4>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <SystemClock_Config+0xd8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a23      	ldr	r2, [pc, #140]	; (8000650 <SystemClock_Config+0xd8>)
 80005c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <SystemClock_Config+0xd8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005d4:	2303      	movs	r3, #3
 80005d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005de:	2301      	movs	r3, #1
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e2:	2310      	movs	r3, #16
 80005e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 80005f0:	230f      	movs	r3, #15
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 80005f4:	2390      	movs	r3, #144	; 0x90
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005fc:	2305      	movs	r3, #5
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000600:	2302      	movs	r3, #2
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4618      	mov	r0, r3
 800060a:	f004 ffe1 	bl	80055d0 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000614:	f000 fd0c 	bl	8001030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f004 f9fc 	bl	8004a30 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800063e:	f000 fcf7 	bl	8001030 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	; 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_ADC1_Init+0x98>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <MX_ADC1_Init+0x9c>)
 800066a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_ADC1_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_ADC1_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_ADC1_Init+0x98>)
 8000694:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <MX_ADC1_Init+0xa0>)
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_ADC1_Init+0x98>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_ADC1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_ADC1_Init+0x98>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b2:	480e      	ldr	r0, [pc, #56]	; (80006ec <MX_ADC1_Init+0x98>)
 80006b4:	f001 fb24 	bl	8001d00 <HAL_ADC_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006be:	f000 fcb7 	bl	8001030 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006c2:	230a      	movs	r3, #10
 80006c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	4619      	mov	r1, r3
 80006d2:	4806      	ldr	r0, [pc, #24]	; (80006ec <MX_ADC1_Init+0x98>)
 80006d4:	f001 fb58 	bl	8001d88 <HAL_ADC_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006de:	f000 fca7 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000028 	.word	0x20000028
 80006f0:	40012000 	.word	0x40012000
 80006f4:	0f000001 	.word	0x0f000001

080006f8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006fe:	463b      	mov	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_DAC_Init+0x4c>)
 8000708:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <MX_DAC_Init+0x50>)
 800070a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <MX_DAC_Init+0x4c>)
 800070e:	f001 fe7a 	bl	8002406 <HAL_DAC_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000718:	f000 fc8a 	bl	8001030 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	4619      	mov	r1, r3
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <MX_DAC_Init+0x4c>)
 800072c:	f001 fe8d 	bl	800244a <HAL_DAC_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000736:	f000 fc7b 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000070 	.word	0x20000070
 8000748:	40007400 	.word	0x40007400

0800074c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000750:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 8000752:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <MX_DFSDM1_Init+0x6c>)
 8000754:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 8000758:	2201      	movs	r2, #1
 800075a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 8000764:	2202      	movs	r2, #2
 8000766:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 800077c:	2202      	movs	r2, #2
 800077e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 800078e:	2201      	movs	r2, #1
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 8000794:	2200      	movs	r2, #0
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 800079a:	2200      	movs	r2, #0
 800079c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_DFSDM1_Init+0x68>)
 80007a0:	f001 fea2 	bl	80024e8 <HAL_DFSDM_ChannelInit>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80007aa:	f000 fc41 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000084 	.word	0x20000084
 80007b8:	40016020 	.word	0x40016020

080007bc <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 80007c0:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <MX_DFSDM2_Init+0xc4>)
 80007c2:	4a30      	ldr	r2, [pc, #192]	; (8000884 <MX_DFSDM2_Init+0xc8>)
 80007c4:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <MX_DFSDM2_Init+0xc4>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80007cc:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <MX_DFSDM2_Init+0xc4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <MX_DFSDM2_Init+0xc4>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <MX_DFSDM2_Init+0xc4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007de:	4b28      	ldr	r3, [pc, #160]	; (8000880 <MX_DFSDM2_Init+0xc4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80007e4:	4b26      	ldr	r3, [pc, #152]	; (8000880 <MX_DFSDM2_Init+0xc4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <MX_DFSDM2_Init+0xc4>)
 80007ec:	2202      	movs	r2, #2
 80007ee:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80007f0:	4b23      	ldr	r3, [pc, #140]	; (8000880 <MX_DFSDM2_Init+0xc4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <MX_DFSDM2_Init+0xc4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 80007fc:	4b20      	ldr	r3, [pc, #128]	; (8000880 <MX_DFSDM2_Init+0xc4>)
 80007fe:	2201      	movs	r2, #1
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000802:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <MX_DFSDM2_Init+0xc4>)
 8000804:	2200      	movs	r2, #0
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000808:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <MX_DFSDM2_Init+0xc4>)
 800080a:	2200      	movs	r2, #0
 800080c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 800080e:	481c      	ldr	r0, [pc, #112]	; (8000880 <MX_DFSDM2_Init+0xc4>)
 8000810:	f001 fe6a 	bl	80024e8 <HAL_DFSDM_ChannelInit>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 800081a:	f000 fc09 	bl	8001030 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_DFSDM2_Init+0xcc>)
 8000820:	4a1a      	ldr	r2, [pc, #104]	; (800088c <MX_DFSDM2_Init+0xd0>)
 8000822:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_DFSDM2_Init+0xcc>)
 8000826:	2201      	movs	r2, #1
 8000828:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_DFSDM2_Init+0xcc>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_DFSDM2_Init+0xcc>)
 8000832:	2202      	movs	r2, #2
 8000834:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_DFSDM2_Init+0xcc>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_DFSDM2_Init+0xcc>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_DFSDM2_Init+0xcc>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_DFSDM2_Init+0xcc>)
 800084a:	2202      	movs	r2, #2
 800084c:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_DFSDM2_Init+0xcc>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_DFSDM2_Init+0xcc>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_DFSDM2_Init+0xcc>)
 800085c:	2201      	movs	r2, #1
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_DFSDM2_Init+0xcc>)
 8000862:	2200      	movs	r2, #0
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_DFSDM2_Init+0xcc>)
 8000868:	2200      	movs	r2, #0
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 800086c:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_DFSDM2_Init+0xcc>)
 800086e:	f001 fe3b 	bl	80024e8 <HAL_DFSDM_ChannelInit>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000878:	f000 fbda 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000bc 	.word	0x200000bc
 8000884:	40016420 	.word	0x40016420
 8000888:	200000f4 	.word	0x200000f4
 800088c:	400164e0 	.word	0x400164e0

08000890 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_FMPI2C1_Init+0x60>)
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <MX_FMPI2C1_Init+0x64>)
 8000898:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_FMPI2C1_Init+0x60>)
 800089c:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <MX_FMPI2C1_Init+0x68>)
 800089e:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_FMPI2C1_Init+0x60>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_FMPI2C1_Init+0x60>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_FMPI2C1_Init+0x60>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_FMPI2C1_Init+0x60>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <MX_FMPI2C1_Init+0x60>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_FMPI2C1_Init+0x60>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_FMPI2C1_Init+0x60>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 80008ca:	4809      	ldr	r0, [pc, #36]	; (80008f0 <MX_FMPI2C1_Init+0x60>)
 80008cc:	f001 ff60 	bl	8002790 <HAL_FMPI2C_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 80008d6:	f000 fbab 	bl	8001030 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_FMPI2C1_Init+0x60>)
 80008de:	f001 ffe6 	bl	80028ae <HAL_FMPI2CEx_ConfigAnalogFilter>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 fba2 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000012c 	.word	0x2000012c
 80008f4:	40006000 	.word	0x40006000
 80008f8:	00303d5b 	.word	0x00303d5b

080008fc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_I2S2_Init+0x54>)
 8000902:	4a14      	ldr	r2, [pc, #80]	; (8000954 <MX_I2S2_Init+0x58>)
 8000904:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_I2S2_Init+0x54>)
 8000908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_I2S2_Init+0x54>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_I2S2_Init+0x54>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_I2S2_Init+0x54>)
 800091c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000920:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_I2S2_Init+0x54>)
 8000924:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000928:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_I2S2_Init+0x54>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_I2S2_Init+0x54>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_I2S2_Init+0x54>)
 8000938:	2201      	movs	r2, #1
 800093a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_I2S2_Init+0x54>)
 800093e:	f003 faf3 	bl	8003f28 <HAL_I2S_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000948:	f000 fb72 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000178 	.word	0x20000178
 8000954:	40003800 	.word	0x40003800

08000958 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_QUADSPI_Init+0x50>)
 800095e:	4a13      	ldr	r2, [pc, #76]	; (80009ac <MX_QUADSPI_Init+0x54>)
 8000960:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 0;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_QUADSPI_Init+0x50>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_QUADSPI_Init+0x50>)
 800096a:	2204      	movs	r2, #4
 800096c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_QUADSPI_Init+0x50>)
 8000970:	2210      	movs	r2, #16
 8000972:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_QUADSPI_Init+0x50>)
 8000976:	2218      	movs	r2, #24
 8000978:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_QUADSPI_Init+0x50>)
 800097c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000980:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_QUADSPI_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_QUADSPI_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_QUADSPI_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_QUADSPI_Init+0x50>)
 8000996:	f003 ff89 	bl	80048ac <HAL_QSPI_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80009a0:	f000 fb46 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200001c0 	.word	0x200001c0
 80009ac:	a0001000 	.word	0xa0001000

080009b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b6:	463b      	mov	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_TIM6_Init+0x64>)
 80009c0:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <MX_TIM6_Init+0x68>)
 80009c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_TIM6_Init+0x64>)
 80009c6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80009ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_TIM6_Init+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 29999;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_TIM6_Init+0x64>)
 80009d4:	f247 522f 	movw	r2, #29999	; 0x752f
 80009d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_TIM6_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <MX_TIM6_Init+0x64>)
 80009e2:	f005 f8c1 	bl	8005b68 <HAL_TIM_Base_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80009ec:	f000 fb20 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009f8:	463b      	mov	r3, r7
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_TIM6_Init+0x64>)
 80009fe:	f005 fb43 	bl	8006088 <HAL_TIMEx_MasterConfigSynchronization>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f000 fb12 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2000020c 	.word	0x2000020c
 8000a18:	40001000 	.word	0x40001000

08000a1c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a22:	463b      	mov	r3, r7
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_TIM7_Init+0x64>)
 8000a2c:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <MX_TIM7_Init+0x68>)
 8000a2e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1599;
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_TIM7_Init+0x64>)
 8000a32:	f240 623f 	movw	r2, #1599	; 0x63f
 8000a36:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_TIM7_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_TIM7_Init+0x64>)
 8000a40:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a44:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_TIM7_Init+0x64>)
 8000a48:	2280      	movs	r2, #128	; 0x80
 8000a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <MX_TIM7_Init+0x64>)
 8000a4e:	f005 f88b 	bl	8005b68 <HAL_TIM_Base_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000a58:	f000 faea 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_TIM7_Init+0x64>)
 8000a6a:	f005 fb0d 	bl	8006088 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000a74:	f000 fadc 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000254 	.word	0x20000254
 8000a84:	40001400 	.word	0x40001400

08000a88 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_UART10_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_UART10_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_UART10_Init+0x4c>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_UART10_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_UART10_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_UART10_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_UART10_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_UART10_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_UART10_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_UART10_Init+0x4c>)
 8000ac0:	f005 fb72 	bl	80061a8 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000aca:	f000 fab1 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000029c 	.word	0x2000029c
 8000ad8:	40011c00 	.word	0x40011c00

08000adc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_USART6_UART_Init+0x4c>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <MX_USART6_UART_Init+0x50>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_USART6_UART_Init+0x4c>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_USART6_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_USART6_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_USART6_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_USART6_UART_Init+0x4c>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_USART6_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_USART6_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_USART6_UART_Init+0x4c>)
 8000b14:	f005 fb48 	bl	80061a8 <HAL_UART_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b1e:	f000 fa87 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200002e0 	.word	0x200002e0
 8000b2c:	40011400 	.word	0x40011400

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08e      	sub	sp, #56	; 0x38
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
 8000b4a:	4bb2      	ldr	r3, [pc, #712]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4ab1      	ldr	r2, [pc, #708]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000b50:	f043 0310 	orr.w	r3, r3, #16
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4baf      	ldr	r3, [pc, #700]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0310 	and.w	r3, r3, #16
 8000b5e:	623b      	str	r3, [r7, #32]
 8000b60:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	4bab      	ldr	r3, [pc, #684]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4aaa      	ldr	r2, [pc, #680]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4ba8      	ldr	r3, [pc, #672]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	61fb      	str	r3, [r7, #28]
 8000b7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	4ba4      	ldr	r3, [pc, #656]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4aa3      	ldr	r2, [pc, #652]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000b88:	f043 0320 	orr.w	r3, r3, #32
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4ba1      	ldr	r3, [pc, #644]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0320 	and.w	r3, r3, #32
 8000b96:	61bb      	str	r3, [r7, #24]
 8000b98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	4b9d      	ldr	r3, [pc, #628]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a9c      	ldr	r2, [pc, #624]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b9a      	ldr	r3, [pc, #616]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b96      	ldr	r3, [pc, #600]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a95      	ldr	r2, [pc, #596]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b93      	ldr	r3, [pc, #588]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b8f      	ldr	r3, [pc, #572]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a8e      	ldr	r2, [pc, #568]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b8c      	ldr	r3, [pc, #560]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	4b88      	ldr	r3, [pc, #544]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a87      	ldr	r2, [pc, #540]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b85      	ldr	r3, [pc, #532]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b81      	ldr	r3, [pc, #516]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a80      	ldr	r2, [pc, #512]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000c14:	f043 0308 	orr.w	r3, r3, #8
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b7e      	ldr	r3, [pc, #504]	; (8000e14 <MX_GPIO_Init+0x2e4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2138      	movs	r1, #56	; 0x38
 8000c2a:	487b      	ldr	r0, [pc, #492]	; (8000e18 <MX_GPIO_Init+0x2e8>)
 8000c2c:	f002 f81e 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2120      	movs	r1, #32
 8000c34:	4879      	ldr	r0, [pc, #484]	; (8000e1c <MX_GPIO_Init+0x2ec>)
 8000c36:	f002 f819 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000c40:	4877      	ldr	r0, [pc, #476]	; (8000e20 <MX_GPIO_Init+0x2f0>)
 8000c42:	f002 f813 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000c4c:	4875      	ldr	r0, [pc, #468]	; (8000e24 <MX_GPIO_Init+0x2f4>)
 8000c4e:	f002 f80d 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000c52:	2338      	movs	r3, #56	; 0x38
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	486b      	ldr	r0, [pc, #428]	; (8000e18 <MX_GPIO_Init+0x2e8>)
 8000c6a:	f001 fe6b 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000c6e:	2340      	movs	r3, #64	; 0x40
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	4863      	ldr	r0, [pc, #396]	; (8000e18 <MX_GPIO_Init+0x2e8>)
 8000c8a:	f001 fe5b 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000c8e:	23c0      	movs	r3, #192	; 0xc0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	485f      	ldr	r0, [pc, #380]	; (8000e28 <MX_GPIO_Init+0x2f8>)
 8000caa:	f001 fe4b 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4857      	ldr	r0, [pc, #348]	; (8000e28 <MX_GPIO_Init+0x2f8>)
 8000ccc:	f001 fe3a 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	484d      	ldr	r0, [pc, #308]	; (8000e1c <MX_GPIO_Init+0x2ec>)
 8000ce6:	f001 fe2d 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000cea:	2301      	movs	r3, #1
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	484b      	ldr	r0, [pc, #300]	; (8000e2c <MX_GPIO_Init+0x2fc>)
 8000d00:	f001 fe20 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000d04:	2320      	movs	r3, #32
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4840      	ldr	r0, [pc, #256]	; (8000e1c <MX_GPIO_Init+0x2ec>)
 8000d1c:	f001 fe12 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000d20:	2301      	movs	r3, #1
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d30:	2302      	movs	r3, #2
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4839      	ldr	r0, [pc, #228]	; (8000e20 <MX_GPIO_Init+0x2f0>)
 8000d3c:	f001 fe02 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000d40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d54:	4619      	mov	r1, r3
 8000d56:	4834      	ldr	r0, [pc, #208]	; (8000e28 <MX_GPIO_Init+0x2f8>)
 8000d58:	f001 fdf4 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d62:	2312      	movs	r3, #18
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	4829      	ldr	r0, [pc, #164]	; (8000e20 <MX_GPIO_Init+0x2f0>)
 8000d7a:	f001 fde3 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000d90:	2307      	movs	r3, #7
 8000d92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4821      	ldr	r0, [pc, #132]	; (8000e20 <MX_GPIO_Init+0x2f0>)
 8000d9c:	f001 fdd2 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000da0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	4819      	ldr	r0, [pc, #100]	; (8000e20 <MX_GPIO_Init+0x2f0>)
 8000dba:	f001 fdc3 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8000dbe:	f248 0380 	movw	r3, #32896	; 0x8080
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4813      	ldr	r0, [pc, #76]	; (8000e24 <MX_GPIO_Init+0x2f4>)
 8000dd6:	f001 fdb5 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8000dda:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	480c      	ldr	r0, [pc, #48]	; (8000e24 <MX_GPIO_Init+0x2f4>)
 8000df4:	f001 fda6 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	e00d      	b.n	8000e30 <MX_GPIO_Init+0x300>
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40020800 	.word	0x40020800
 8000e20:	40020400 	.word	0x40020400
 8000e24:	40021800 	.word	0x40021800
 8000e28:	40021400 	.word	0x40021400
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	4619      	mov	r1, r3
 8000e32:	481a      	ldr	r0, [pc, #104]	; (8000e9c <MX_GPIO_Init+0x36c>)
 8000e34:	f001 fd86 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000e38:	2330      	movs	r3, #48	; 0x30
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e48:	2306      	movs	r3, #6
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <MX_GPIO_Init+0x370>)
 8000e54:	f001 fd76 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000e58:	2340      	movs	r3, #64	; 0x40
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <MX_GPIO_Init+0x370>)
 8000e6e:	f001 fd69 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e84:	2302      	movs	r3, #2
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_GPIO_Init+0x370>)
 8000e90:	f001 fd58 	bl	8002944 <HAL_GPIO_Init>

}
 8000e94:	bf00      	nop
 8000e96:	3738      	adds	r7, #56	; 0x38
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400

08000ea4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]
 8000eba:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000ebc:	4b4f      	ldr	r3, [pc, #316]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000ebe:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ec2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ec4:	4b4d      	ldr	r3, [pc, #308]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000ec6:	4a4e      	ldr	r2, [pc, #312]	; (8001000 <MX_FSMC_Init+0x15c>)
 8000ec8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000eca:	4b4c      	ldr	r3, [pc, #304]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000ed0:	4b4a      	ldr	r3, [pc, #296]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000ed6:	4b49      	ldr	r3, [pc, #292]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000edc:	4b47      	ldr	r3, [pc, #284]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000ede:	2210      	movs	r2, #16
 8000ee0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000ee2:	4b46      	ldr	r3, [pc, #280]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ee8:	4b44      	ldr	r3, [pc, #272]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000eee:	4b43      	ldr	r3, [pc, #268]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000ef4:	4b41      	ldr	r3, [pc, #260]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000efa:	4b40      	ldr	r3, [pc, #256]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000f00:	4b3e      	ldr	r3, [pc, #248]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f06:	4b3d      	ldr	r3, [pc, #244]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000f0c:	4b3b      	ldr	r3, [pc, #236]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f12:	4b3a      	ldr	r3, [pc, #232]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000f18:	4b38      	ldr	r3, [pc, #224]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000f1e:	4b37      	ldr	r3, [pc, #220]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f24:	230f      	movs	r3, #15
 8000f26:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000f28:	230f      	movs	r3, #15
 8000f2a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000f2c:	23ff      	movs	r3, #255	; 0xff
 8000f2e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f30:	230f      	movs	r3, #15
 8000f32:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f34:	2310      	movs	r3, #16
 8000f36:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f38:	2311      	movs	r3, #17
 8000f3a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	4619      	mov	r1, r3
 8000f46:	482d      	ldr	r0, [pc, #180]	; (8000ffc <MX_FSMC_Init+0x158>)
 8000f48:	f004 fdc6 	bl	8005ad8 <HAL_SRAM_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 8000f52:	f000 f86d 	bl	8001030 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8000f56:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <MX_FSMC_Init+0x160>)
 8000f58:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f5c:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f5e:	4b29      	ldr	r3, [pc, #164]	; (8001004 <MX_FSMC_Init+0x160>)
 8000f60:	4a27      	ldr	r2, [pc, #156]	; (8001000 <MX_FSMC_Init+0x15c>)
 8000f62:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <MX_FSMC_Init+0x160>)
 8000f66:	2204      	movs	r2, #4
 8000f68:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <MX_FSMC_Init+0x160>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f70:	4b24      	ldr	r3, [pc, #144]	; (8001004 <MX_FSMC_Init+0x160>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f76:	4b23      	ldr	r3, [pc, #140]	; (8001004 <MX_FSMC_Init+0x160>)
 8000f78:	2210      	movs	r2, #16
 8000f7a:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000f7c:	4b21      	ldr	r3, [pc, #132]	; (8001004 <MX_FSMC_Init+0x160>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <MX_FSMC_Init+0x160>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_FSMC_Init+0x160>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_FSMC_Init+0x160>)
 8000f90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000f96:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_FSMC_Init+0x160>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_FSMC_Init+0x160>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_FSMC_Init+0x160>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_FSMC_Init+0x160>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_FSMC_Init+0x160>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_FSMC_Init+0x160>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_FSMC_Init+0x160>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000fc8:	23ff      	movs	r3, #255	; 0xff
 8000fca:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000fcc:	230f      	movs	r3, #15
 8000fce:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000fd0:	2310      	movs	r3, #16
 8000fd2:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000fd4:	2311      	movs	r3, #17
 8000fd6:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4808      	ldr	r0, [pc, #32]	; (8001004 <MX_FSMC_Init+0x160>)
 8000fe4:	f004 fd78 	bl	8005ad8 <HAL_SRAM_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 8000fee:	f000 f81f 	bl	8001030 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3720      	adds	r7, #32
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000324 	.word	0x20000324
 8001000:	a0000104 	.word	0xa0000104
 8001004:	20000374 	.word	0x20000374

08001008 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim7 )
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d103      	bne.n	8001020 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
    HAL_GPIO_TogglePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin);
 8001018:	2120      	movs	r1, #32
 800101a:	4804      	ldr	r0, [pc, #16]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800101c:	f001 fe3f 	bl	8002c9e <HAL_GPIO_TogglePin>
  }
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000254 	.word	0x20000254
 800102c:	40020800 	.word	0x40020800

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001034:	b672      	cpsid	i
}
 8001036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001038:	e7fe      	b.n	8001038 <Error_Handler+0x8>
	...

0800103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <HAL_MspInit+0x4c>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <HAL_MspInit+0x4c>)
 800104c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <HAL_MspInit+0x4c>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <HAL_MspInit+0x4c>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	4a08      	ldr	r2, [pc, #32]	; (8001088 <HAL_MspInit+0x4c>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106c:	6413      	str	r3, [r2, #64]	; 0x40
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_MspInit+0x4c>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a31      	ldr	r2, [pc, #196]	; (8001170 <HAL_ADC_MspInit+0xe4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d15b      	bne.n	8001166 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
 80010b2:	4b30      	ldr	r3, [pc, #192]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a2f      	ldr	r2, [pc, #188]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	4b29      	ldr	r3, [pc, #164]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a28      	ldr	r2, [pc, #160]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b22      	ldr	r3, [pc, #136]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a21      	ldr	r2, [pc, #132]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a1a      	ldr	r2, [pc, #104]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 800111e:	2311      	movs	r3, #17
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001122:	2303      	movs	r3, #3
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	4811      	ldr	r0, [pc, #68]	; (8001178 <HAL_ADC_MspInit+0xec>)
 8001132:	f001 fc07 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8001136:	2326      	movs	r3, #38	; 0x26
 8001138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	480c      	ldr	r0, [pc, #48]	; (800117c <HAL_ADC_MspInit+0xf0>)
 800114a:	f001 fbfb 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 800114e:	2302      	movs	r3, #2
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001152:	2303      	movs	r3, #3
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <HAL_ADC_MspInit+0xf4>)
 8001162:	f001 fbef 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001166:	bf00      	nop
 8001168:	3730      	adds	r7, #48	; 0x30
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40012000 	.word	0x40012000
 8001174:	40023800 	.word	0x40023800
 8001178:	40020800 	.word	0x40020800
 800117c:	40020000 	.word	0x40020000
 8001180:	40020400 	.word	0x40020400

08001184 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a17      	ldr	r2, [pc, #92]	; (8001200 <HAL_DAC_MspInit+0x7c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d127      	bne.n	80011f6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_DAC_MspInit+0x80>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a15      	ldr	r2, [pc, #84]	; (8001204 <HAL_DAC_MspInit+0x80>)
 80011b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_DAC_MspInit+0x80>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_DAC_MspInit+0x80>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <HAL_DAC_MspInit+0x80>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_DAC_MspInit+0x80>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 80011de:	2310      	movs	r3, #16
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e2:	2303      	movs	r3, #3
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_DAC_MspInit+0x84>)
 80011f2:	f001 fba7 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40007400 	.word	0x40007400
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000

0800120c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0a4      	sub	sp, #144	; 0x90
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	2258      	movs	r2, #88	; 0x58
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f005 ffdb 	bl	80071e8 <memset>
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a93      	ldr	r2, [pc, #588]	; (8001484 <HAL_DFSDM_ChannelMspInit+0x278>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d00e      	beq.n	800125a <HAL_DFSDM_ChannelMspInit+0x4e>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a91      	ldr	r2, [pc, #580]	; (8001488 <HAL_DFSDM_ChannelMspInit+0x27c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d009      	beq.n	800125a <HAL_DFSDM_ChannelMspInit+0x4e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a90      	ldr	r2, [pc, #576]	; (800148c <HAL_DFSDM_ChannelMspInit+0x280>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d004      	beq.n	800125a <HAL_DFSDM_ChannelMspInit+0x4e>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a8e      	ldr	r2, [pc, #568]	; (8001490 <HAL_DFSDM_ChannelMspInit+0x284>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d16b      	bne.n	8001332 <HAL_DFSDM_ChannelMspInit+0x126>
 800125a:	4b8e      	ldr	r3, [pc, #568]	; (8001494 <HAL_DFSDM_ChannelMspInit+0x288>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d167      	bne.n	8001332 <HAL_DFSDM_ChannelMspInit+0x126>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8001268:	2300      	movs	r3, #0
 800126a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001270:	4618      	mov	r0, r3
 8001272:	f003 fdbd 	bl	8004df0 <HAL_RCCEx_PeriphCLKConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_DFSDM_ChannelMspInit+0x74>
    {
      Error_Handler();
 800127c:	f7ff fed8 	bl	8001030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
 8001284:	4b84      	ldr	r3, [pc, #528]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001288:	4a83      	ldr	r2, [pc, #524]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 800128a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800128e:	6453      	str	r3, [r2, #68]	; 0x44
 8001290:	4b81      	ldr	r3, [pc, #516]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 8001292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001298:	623b      	str	r3, [r7, #32]
 800129a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	4b7d      	ldr	r3, [pc, #500]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	4a7c      	ldr	r2, [pc, #496]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6313      	str	r3, [r2, #48]	; 0x30
 80012ac:	4b7a      	ldr	r3, [pc, #488]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
 80012bc:	4b76      	ldr	r3, [pc, #472]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a75      	ldr	r2, [pc, #468]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 80012c2:	f043 0308 	orr.w	r3, r3, #8
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b73      	ldr	r3, [pc, #460]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	61bb      	str	r3, [r7, #24]
 80012d2:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80012d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80012ec:	2306      	movs	r3, #6
 80012ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012f6:	4619      	mov	r1, r3
 80012f8:	4868      	ldr	r0, [pc, #416]	; (800149c <HAL_DFSDM_ChannelMspInit+0x290>)
 80012fa:	f001 fb23 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 80012fe:	2340      	movs	r3, #64	; 0x40
 8001300:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001314:	2306      	movs	r3, #6
 8001316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800131e:	4619      	mov	r1, r3
 8001320:	485f      	ldr	r0, [pc, #380]	; (80014a0 <HAL_DFSDM_ChannelMspInit+0x294>)
 8001322:	f001 fb0f 	bl	8002944 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001326:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <HAL_DFSDM_ChannelMspInit+0x288>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	4a59      	ldr	r2, [pc, #356]	; (8001494 <HAL_DFSDM_ChannelMspInit+0x288>)
 800132e:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001330:	e0a4      	b.n	800147c <HAL_DFSDM_ChannelMspInit+0x270>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a53      	ldr	r2, [pc, #332]	; (8001484 <HAL_DFSDM_ChannelMspInit+0x278>)
 8001338:	4293      	cmp	r3, r2
 800133a:	f000 809f 	beq.w	800147c <HAL_DFSDM_ChannelMspInit+0x270>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a51      	ldr	r2, [pc, #324]	; (8001488 <HAL_DFSDM_ChannelMspInit+0x27c>)
 8001344:	4293      	cmp	r3, r2
 8001346:	f000 8099 	beq.w	800147c <HAL_DFSDM_ChannelMspInit+0x270>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a4f      	ldr	r2, [pc, #316]	; (800148c <HAL_DFSDM_ChannelMspInit+0x280>)
 8001350:	4293      	cmp	r3, r2
 8001352:	f000 8093 	beq.w	800147c <HAL_DFSDM_ChannelMspInit+0x270>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a4d      	ldr	r2, [pc, #308]	; (8001490 <HAL_DFSDM_ChannelMspInit+0x284>)
 800135c:	4293      	cmp	r3, r2
 800135e:	f000 808d 	beq.w	800147c <HAL_DFSDM_ChannelMspInit+0x270>
 8001362:	4b50      	ldr	r3, [pc, #320]	; (80014a4 <HAL_DFSDM_ChannelMspInit+0x298>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f040 8088 	bne.w	800147c <HAL_DFSDM_ChannelMspInit+0x270>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM2;
 800136c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Dfsdm2ClockSelection = RCC_DFSDM2CLKSOURCE_APB2;
 8001372:	2300      	movs	r3, #0
 8001374:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137a:	4618      	mov	r0, r3
 800137c:	f003 fd38 	bl	8004df0 <HAL_RCCEx_PeriphCLKConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_DFSDM_ChannelMspInit+0x17e>
      Error_Handler();
 8001386:	f7ff fe53 	bl	8001030 <Error_Handler>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	4b42      	ldr	r3, [pc, #264]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a41      	ldr	r2, [pc, #260]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 8001394:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a3a      	ldr	r2, [pc, #232]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b38      	ldr	r3, [pc, #224]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b34      	ldr	r3, [pc, #208]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a33      	ldr	r2, [pc, #204]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a2c      	ldr	r2, [pc, #176]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x28c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001410:	2307      	movs	r3, #7
 8001412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800141a:	4619      	mov	r1, r3
 800141c:	481f      	ldr	r0, [pc, #124]	; (800149c <HAL_DFSDM_ChannelMspInit+0x290>)
 800141e:	f001 fa91 	bl	8002944 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001422:	2304      	movs	r3, #4
 8001424:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001438:	2303      	movs	r3, #3
 800143a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001442:	4619      	mov	r1, r3
 8001444:	4816      	ldr	r0, [pc, #88]	; (80014a0 <HAL_DFSDM_ChannelMspInit+0x294>)
 8001446:	f001 fa7d 	bl	8002944 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001460:	2306      	movs	r3, #6
 8001462:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800146a:	4619      	mov	r1, r3
 800146c:	480e      	ldr	r0, [pc, #56]	; (80014a8 <HAL_DFSDM_ChannelMspInit+0x29c>)
 800146e:	f001 fa69 	bl	8002944 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_DFSDM_ChannelMspInit+0x298>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_DFSDM_ChannelMspInit+0x298>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	3790      	adds	r7, #144	; 0x90
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40016000 	.word	0x40016000
 8001488:	40016020 	.word	0x40016020
 800148c:	40016040 	.word	0x40016040
 8001490:	40016060 	.word	0x40016060
 8001494:	200003c4 	.word	0x200003c4
 8001498:	40023800 	.word	0x40023800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020c00 	.word	0x40020c00
 80014a4:	200003c8 	.word	0x200003c8
 80014a8:	40020400 	.word	0x40020400

080014ac <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0a0      	sub	sp, #128	; 0x80
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2258      	movs	r2, #88	; 0x58
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f005 fe8b 	bl	80071e8 <memset>
  if(hfmpi2c->Instance==FMPI2C1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a20      	ldr	r2, [pc, #128]	; (8001558 <HAL_FMPI2C_MspInit+0xac>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d139      	bne.n	8001550 <HAL_FMPI2C_MspInit+0xa4>

  /* USER CODE END FMPI2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 80014dc:	2310      	movs	r3, #16
 80014de:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80014e0:	2300      	movs	r3, #0
 80014e2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fc81 	bl	8004df0 <HAL_RCCEx_PeriphCLKConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_FMPI2C_MspInit+0x4c>
    {
      Error_Handler();
 80014f4:	f7ff fd9c 	bl	8001030 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_FMPI2C_MspInit+0xb0>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	4a16      	ldr	r2, [pc, #88]	; (800155c <HAL_FMPI2C_MspInit+0xb0>)
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	6313      	str	r3, [r2, #48]	; 0x30
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_FMPI2C_MspInit+0xb0>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001514:	23c0      	movs	r3, #192	; 0xc0
 8001516:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001518:	2312      	movs	r3, #18
 800151a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151c:	2301      	movs	r3, #1
 800151e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001520:	2303      	movs	r3, #3
 8001522:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001524:	2304      	movs	r3, #4
 8001526:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001528:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800152c:	4619      	mov	r1, r3
 800152e:	480c      	ldr	r0, [pc, #48]	; (8001560 <HAL_FMPI2C_MspInit+0xb4>)
 8001530:	f001 fa08 	bl	8002944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_FMPI2C_MspInit+0xb0>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_FMPI2C_MspInit+0xb0>)
 800153e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001542:	6413      	str	r3, [r2, #64]	; 0x40
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_FMPI2C_MspInit+0xb0>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001550:	bf00      	nop
 8001552:	3780      	adds	r7, #128	; 0x80
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40006000 	.word	0x40006000
 800155c:	40023800 	.word	0x40023800
 8001560:	40020800 	.word	0x40020800

08001564 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b0a2      	sub	sp, #136	; 0x88
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	2258      	movs	r2, #88	; 0x58
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f005 fe2f 	bl	80071e8 <memset>
  if(hi2s->Instance==SPI2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a60      	ldr	r2, [pc, #384]	; (8001710 <HAL_I2S_MspInit+0x1ac>)
 8001590:	4293      	cmp	r3, r2
 8001592:	f040 80b9 	bne.w	8001708 <HAL_I2S_MspInit+0x1a4>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S|RCC_PERIPHCLK_I2S_APB1;
 8001596:	2381      	movs	r3, #129	; 0x81
 8001598:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800159a:	2332      	movs	r3, #50	; 0x32
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 800159e:	230c      	movs	r3, #12
 80015a0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80015a2:	2302      	movs	r3, #2
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80015a6:	2302      	movs	r3, #2
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80015aa:	2300      	movs	r3, #0
 80015ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80015ae:	2300      	movs	r3, #0
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 fc1a 	bl	8004df0 <HAL_RCCEx_PeriphCLKConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_I2S_MspInit+0x62>
    {
      Error_Handler();
 80015c2:	f7ff fd35 	bl	8001030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	4b52      	ldr	r3, [pc, #328]	; (8001714 <HAL_I2S_MspInit+0x1b0>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a51      	ldr	r2, [pc, #324]	; (8001714 <HAL_I2S_MspInit+0x1b0>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
 80015d6:	4b4f      	ldr	r3, [pc, #316]	; (8001714 <HAL_I2S_MspInit+0x1b0>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	4b4b      	ldr	r3, [pc, #300]	; (8001714 <HAL_I2S_MspInit+0x1b0>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a4a      	ldr	r2, [pc, #296]	; (8001714 <HAL_I2S_MspInit+0x1b0>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b48      	ldr	r3, [pc, #288]	; (8001714 <HAL_I2S_MspInit+0x1b0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b44      	ldr	r3, [pc, #272]	; (8001714 <HAL_I2S_MspInit+0x1b0>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a43      	ldr	r2, [pc, #268]	; (8001714 <HAL_I2S_MspInit+0x1b0>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b41      	ldr	r3, [pc, #260]	; (8001714 <HAL_I2S_MspInit+0x1b0>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <HAL_I2S_MspInit+0x1b0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a3c      	ldr	r2, [pc, #240]	; (8001714 <HAL_I2S_MspInit+0x1b0>)
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <HAL_I2S_MspInit+0x1b0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b36      	ldr	r3, [pc, #216]	; (8001714 <HAL_I2S_MspInit+0x1b0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a35      	ldr	r2, [pc, #212]	; (8001714 <HAL_I2S_MspInit+0x1b0>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b33      	ldr	r3, [pc, #204]	; (8001714 <HAL_I2S_MspInit+0x1b0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8001652:	2304      	movs	r3, #4
 8001654:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001664:	2306      	movs	r3, #6
 8001666:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800166e:	4619      	mov	r1, r3
 8001670:	4829      	ldr	r0, [pc, #164]	; (8001718 <HAL_I2S_MspInit+0x1b4>)
 8001672:	f001 f967 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001676:	2308      	movs	r3, #8
 8001678:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001688:	2305      	movs	r3, #5
 800168a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001692:	4619      	mov	r1, r3
 8001694:	4820      	ldr	r0, [pc, #128]	; (8001718 <HAL_I2S_MspInit+0x1b4>)
 8001696:	f001 f955 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 800169a:	2308      	movs	r3, #8
 800169c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016ac:	2305      	movs	r3, #5
 80016ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016b6:	4619      	mov	r1, r3
 80016b8:	4818      	ldr	r0, [pc, #96]	; (800171c <HAL_I2S_MspInit+0x1b8>)
 80016ba:	f001 f943 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 80016be:	2308      	movs	r3, #8
 80016c0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016d0:	2305      	movs	r3, #5
 80016d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016da:	4619      	mov	r1, r3
 80016dc:	4810      	ldr	r0, [pc, #64]	; (8001720 <HAL_I2S_MspInit+0x1bc>)
 80016de:	f001 f931 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 80016e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016f6:	2305      	movs	r3, #5
 80016f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001700:	4619      	mov	r1, r3
 8001702:	4808      	ldr	r0, [pc, #32]	; (8001724 <HAL_I2S_MspInit+0x1c0>)
 8001704:	f001 f91e 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001708:	bf00      	nop
 800170a:	3788      	adds	r7, #136	; 0x88
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40003800 	.word	0x40003800
 8001714:	40023800 	.word	0x40023800
 8001718:	40020800 	.word	0x40020800
 800171c:	40020000 	.word	0x40020000
 8001720:	40020c00 	.word	0x40020c00
 8001724:	40020400 	.word	0x40020400

08001728 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08e      	sub	sp, #56	; 0x38
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a56      	ldr	r2, [pc, #344]	; (80018a0 <HAL_QSPI_MspInit+0x178>)
 8001746:	4293      	cmp	r3, r2
 8001748:	f040 80a6 	bne.w	8001898 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
 8001750:	4b54      	ldr	r3, [pc, #336]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 8001752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001754:	4a53      	ldr	r2, [pc, #332]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 8001756:	f043 0302 	orr.w	r3, r3, #2
 800175a:	6393      	str	r3, [r2, #56]	; 0x38
 800175c:	4b51      	ldr	r3, [pc, #324]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 800175e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	623b      	str	r3, [r7, #32]
 8001766:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	4b4d      	ldr	r3, [pc, #308]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	4a4c      	ldr	r2, [pc, #304]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 8001772:	f043 0310 	orr.w	r3, r3, #16
 8001776:	6313      	str	r3, [r2, #48]	; 0x30
 8001778:	4b4a      	ldr	r3, [pc, #296]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	61bb      	str	r3, [r7, #24]
 8001788:	4b46      	ldr	r3, [pc, #280]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	4a45      	ldr	r2, [pc, #276]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 800178e:	f043 0320 	orr.w	r3, r3, #32
 8001792:	6313      	str	r3, [r2, #48]	; 0x30
 8001794:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	f003 0320 	and.w	r3, r3, #32
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	4a3e      	ldr	r2, [pc, #248]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 80017aa:	f043 0302 	orr.w	r3, r3, #2
 80017ae:	6313      	str	r3, [r2, #48]	; 0x30
 80017b0:	4b3c      	ldr	r3, [pc, #240]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4a37      	ldr	r2, [pc, #220]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 80017c6:	f043 0308 	orr.w	r3, r3, #8
 80017ca:	6313      	str	r3, [r2, #48]	; 0x30
 80017cc:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	4b31      	ldr	r3, [pc, #196]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 80017de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e0:	4a30      	ldr	r2, [pc, #192]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 80017e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e6:	6313      	str	r3, [r2, #48]	; 0x30
 80017e8:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <HAL_QSPI_MspInit+0x17c>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 80017f4:	2304      	movs	r3, #4
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001804:	2309      	movs	r3, #9
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180c:	4619      	mov	r1, r3
 800180e:	4826      	ldr	r0, [pc, #152]	; (80018a8 <HAL_QSPI_MspInit+0x180>)
 8001810:	f001 f898 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001814:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001826:	230a      	movs	r3, #10
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800182a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182e:	4619      	mov	r1, r3
 8001830:	481e      	ldr	r0, [pc, #120]	; (80018ac <HAL_QSPI_MspInit+0x184>)
 8001832:	f001 f887 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001836:	2304      	movs	r3, #4
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001846:	2309      	movs	r3, #9
 8001848:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4619      	mov	r1, r3
 8001850:	4817      	ldr	r0, [pc, #92]	; (80018b0 <HAL_QSPI_MspInit+0x188>)
 8001852:	f001 f877 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001868:	2309      	movs	r3, #9
 800186a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	4810      	ldr	r0, [pc, #64]	; (80018b4 <HAL_QSPI_MspInit+0x18c>)
 8001874:	f001 f866 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001878:	2340      	movs	r3, #64	; 0x40
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001888:	230a      	movs	r3, #10
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001890:	4619      	mov	r1, r3
 8001892:	4809      	ldr	r0, [pc, #36]	; (80018b8 <HAL_QSPI_MspInit+0x190>)
 8001894:	f001 f856 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001898:	bf00      	nop
 800189a:	3738      	adds	r7, #56	; 0x38
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	a0001000 	.word	0xa0001000
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40021400 	.word	0x40021400
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020c00 	.word	0x40020c00
 80018b8:	40021800 	.word	0x40021800

080018bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a18      	ldr	r2, [pc, #96]	; (800192c <HAL_TIM_Base_MspInit+0x70>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d10e      	bne.n	80018ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_TIM_Base_MspInit+0x74>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a16      	ldr	r2, [pc, #88]	; (8001930 <HAL_TIM_Base_MspInit+0x74>)
 80018d8:	f043 0310 	orr.w	r3, r3, #16
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_TIM_Base_MspInit+0x74>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80018ea:	e01a      	b.n	8001922 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a10      	ldr	r2, [pc, #64]	; (8001934 <HAL_TIM_Base_MspInit+0x78>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d115      	bne.n	8001922 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <HAL_TIM_Base_MspInit+0x74>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <HAL_TIM_Base_MspInit+0x74>)
 8001900:	f043 0320 	orr.w	r3, r3, #32
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_TIM_Base_MspInit+0x74>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	2037      	movs	r0, #55	; 0x37
 8001918:	f000 fd3f 	bl	800239a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800191c:	2037      	movs	r0, #55	; 0x37
 800191e:	f000 fd58 	bl	80023d2 <HAL_NVIC_EnableIRQ>
}
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40001000 	.word	0x40001000
 8001930:	40023800 	.word	0x40023800
 8001934:	40001400 	.word	0x40001400

08001938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08c      	sub	sp, #48	; 0x30
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a33      	ldr	r2, [pc, #204]	; (8001a24 <HAL_UART_MspInit+0xec>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d12d      	bne.n	80019b6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	4b32      	ldr	r3, [pc, #200]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a31      	ldr	r2, [pc, #196]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 8001964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001972:	61bb      	str	r3, [r7, #24]
 8001974:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a2a      	ldr	r2, [pc, #168]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 8001980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001992:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 80019a4:	230b      	movs	r3, #11
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	481f      	ldr	r0, [pc, #124]	; (8001a2c <HAL_UART_MspInit+0xf4>)
 80019b0:	f000 ffc8 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80019b4:	e031      	b.n	8001a1a <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <HAL_UART_MspInit+0xf8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d12c      	bne.n	8001a1a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 80019c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c8:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 80019ca:	f043 0320 	orr.w	r3, r3, #32
 80019ce:	6453      	str	r3, [r2, #68]	; 0x44
 80019d0:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 80019d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d4:	f003 0320 	and.w	r3, r3, #32
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 80019e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ea:	6313      	str	r3, [r2, #48]	; 0x30
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_UART_MspInit+0xf0>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80019f8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <HAL_UART_MspInit+0xf4>)
 8001a16:	f000 ff95 	bl	8002944 <HAL_GPIO_Init>
}
 8001a1a:	bf00      	nop
 8001a1c:	3730      	adds	r7, #48	; 0x30
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40011c00 	.word	0x40011c00
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40021800 	.word	0x40021800
 8001a30:	40011400 	.word	0x40011400

08001a34 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001a48:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <HAL_FSMC_MspInit+0xc8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d151      	bne.n	8001af4 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001a50:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <HAL_FSMC_MspInit+0xc8>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <HAL_FSMC_MspInit+0xcc>)
 8001a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5e:	4a28      	ldr	r2, [pc, #160]	; (8001b00 <HAL_FSMC_MspInit+0xcc>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6393      	str	r3, [r2, #56]	; 0x38
 8001a66:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <HAL_FSMC_MspInit+0xcc>)
 8001a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001a72:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001a76:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a84:	230c      	movs	r3, #12
 8001a86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	481d      	ldr	r0, [pc, #116]	; (8001b04 <HAL_FSMC_MspInit+0xd0>)
 8001a8e:	f000 ff59 	bl	8002944 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001a92:	f240 433f 	movw	r3, #1087	; 0x43f
 8001a96:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001aa4:	230c      	movs	r3, #12
 8001aa6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4816      	ldr	r0, [pc, #88]	; (8001b08 <HAL_FSMC_MspInit+0xd4>)
 8001aae:	f000 ff49 	bl	8002944 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001ab2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001ab6:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ac4:	230c      	movs	r3, #12
 8001ac6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	4619      	mov	r1, r3
 8001acc:	480f      	ldr	r0, [pc, #60]	; (8001b0c <HAL_FSMC_MspInit+0xd8>)
 8001ace:	f000 ff39 	bl	8002944 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001ad2:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001ad6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ae4:	230c      	movs	r3, #12
 8001ae6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	4619      	mov	r1, r3
 8001aec:	4808      	ldr	r0, [pc, #32]	; (8001b10 <HAL_FSMC_MspInit+0xdc>)
 8001aee:	f000 ff29 	bl	8002944 <HAL_GPIO_Init>
 8001af2:	e000      	b.n	8001af6 <HAL_FSMC_MspInit+0xc2>
    return;
 8001af4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200003cc 	.word	0x200003cc
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40021400 	.word	0x40021400
 8001b08:	40021800 	.word	0x40021800
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40020c00 	.word	0x40020c00

08001b14 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001b1c:	f7ff ff8a 	bl	8001a34 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <NMI_Handler+0x4>

08001b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <HardFault_Handler+0x4>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <MemManage_Handler+0x4>

08001b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b74:	f000 f8a4 	bl	8001cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <TIM7_IRQHandler+0x10>)
 8001b82:	f004 f8b1 	bl	8005ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000254 	.word	0x20000254

08001b90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <OTG_FS_IRQHandler+0x10>)
 8001b96:	f001 f89c 	bl	8002cd2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000040c 	.word	0x2000040c

08001ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <SystemInit+0x20>)
 8001baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <SystemInit+0x20>)
 8001bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bce:	490e      	ldr	r1, [pc, #56]	; (8001c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bd0:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001be4:	4c0b      	ldr	r4, [pc, #44]	; (8001c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bf2:	f7ff ffd7 	bl	8001ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f005 fad3 	bl	80071a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfa:	f7fe fc8f 	bl	800051c <main>
  bx  lr    
 8001bfe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c00:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c0c:	08007238 	.word	0x08007238
  ldr r2, =_sbss
 8001c10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c14:	20000710 	.word	0x20000710

08001c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC_IRQHandler>
	...

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <HAL_Init+0x40>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0d      	ldr	r2, [pc, #52]	; (8001c5c <HAL_Init+0x40>)
 8001c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_Init+0x40>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <HAL_Init+0x40>)
 8001c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <HAL_Init+0x40>)
 8001c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c44:	2003      	movs	r0, #3
 8001c46:	f000 fb9d 	bl	8002384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f000 f808 	bl	8001c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c50:	f7ff f9f4 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00

08001c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_InitTick+0x54>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x58>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 fbb5 	bl	80023ee <HAL_SYSTICK_Config>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00e      	b.n	8001cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d80a      	bhi.n	8001caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c94:	2200      	movs	r2, #0
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f000 fb7d 	bl	800239a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca0:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <HAL_InitTick+0x5c>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	20000004 	.word	0x20000004

08001cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x20>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x24>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_IncTick+0x24>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	200003d0 	.word	0x200003d0

08001ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_GetTick+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	200003d0 	.word	0x200003d0

08001d00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e033      	b.n	8001d7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff f9b4 	bl	800108c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d118      	bne.n	8001d70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d46:	f023 0302 	bic.w	r3, r3, #2
 8001d4a:	f043 0202 	orr.w	r2, r3, #2
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f94a 	bl	8001fec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f023 0303 	bic.w	r3, r3, #3
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d6e:	e001      	b.n	8001d74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x1c>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e113      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x244>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b09      	cmp	r3, #9
 8001db2:	d925      	bls.n	8001e00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68d9      	ldr	r1, [r3, #12]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3b1e      	subs	r3, #30
 8001dca:	2207      	movs	r2, #7
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43da      	mvns	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68d9      	ldr	r1, [r3, #12]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	4603      	mov	r3, r0
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4403      	add	r3, r0
 8001df2:	3b1e      	subs	r3, #30
 8001df4:	409a      	lsls	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	e022      	b.n	8001e46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6919      	ldr	r1, [r3, #16]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	2207      	movs	r2, #7
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	400a      	ands	r2, r1
 8001e22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6919      	ldr	r1, [r3, #16]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	4618      	mov	r0, r3
 8001e36:	4603      	mov	r3, r0
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4403      	add	r3, r0
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d824      	bhi.n	8001e98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3b05      	subs	r3, #5
 8001e60:	221f      	movs	r2, #31
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	3b05      	subs	r3, #5
 8001e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	635a      	str	r2, [r3, #52]	; 0x34
 8001e96:	e04c      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b0c      	cmp	r3, #12
 8001e9e:	d824      	bhi.n	8001eea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b23      	subs	r3, #35	; 0x23
 8001eb2:	221f      	movs	r2, #31
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43da      	mvns	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	3b23      	subs	r3, #35	; 0x23
 8001edc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee8:	e023      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b41      	subs	r3, #65	; 0x41
 8001efc:	221f      	movs	r2, #31
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	400a      	ands	r2, r1
 8001f0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	4618      	mov	r0, r3
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	3b41      	subs	r3, #65	; 0x41
 8001f26:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <HAL_ADC_ConfigChannel+0x250>)
 8001f34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <HAL_ADC_ConfigChannel+0x254>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d10f      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1d8>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b12      	cmp	r3, #18
 8001f46:	d10b      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1d      	ldr	r2, [pc, #116]	; (8001fdc <HAL_ADC_ConfigChannel+0x254>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d12b      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x23a>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1c      	ldr	r2, [pc, #112]	; (8001fe0 <HAL_ADC_ConfigChannel+0x258>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d003      	beq.n	8001f7c <HAL_ADC_ConfigChannel+0x1f4>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b11      	cmp	r3, #17
 8001f7a:	d122      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a11      	ldr	r2, [pc, #68]	; (8001fe0 <HAL_ADC_ConfigChannel+0x258>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d111      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_ADC_ConfigChannel+0x25c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <HAL_ADC_ConfigChannel+0x260>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	0c9a      	lsrs	r2, r3, #18
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fb4:	e002      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f9      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40012300 	.word	0x40012300
 8001fdc:	40012000 	.word	0x40012000
 8001fe0:	10000012 	.word	0x10000012
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	431bde83 	.word	0x431bde83

08001fec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ff4:	4b79      	ldr	r3, [pc, #484]	; (80021dc <ADC_Init+0x1f0>)
 8001ff6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	431a      	orrs	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	021a      	lsls	r2, r3, #8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6899      	ldr	r1, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	4a58      	ldr	r2, [pc, #352]	; (80021e0 <ADC_Init+0x1f4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d022      	beq.n	80020ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002092:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6899      	ldr	r1, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6899      	ldr	r1, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	e00f      	b.n	80020ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0202 	bic.w	r2, r2, #2
 80020f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6899      	ldr	r1, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7e1b      	ldrb	r3, [r3, #24]
 8002104:	005a      	lsls	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01b      	beq.n	8002150 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002126:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002136:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6859      	ldr	r1, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	3b01      	subs	r3, #1
 8002144:	035a      	lsls	r2, r3, #13
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	e007      	b.n	8002160 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	3b01      	subs	r3, #1
 800217c:	051a      	lsls	r2, r3, #20
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6899      	ldr	r1, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021a2:	025a      	lsls	r2, r3, #9
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6899      	ldr	r1, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	029a      	lsls	r2, r3, #10
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40012300 	.word	0x40012300
 80021e0:	0f000001 	.word	0x0f000001

080021e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002200:	4013      	ands	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800220c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002216:	4a04      	ldr	r2, [pc, #16]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	60d3      	str	r3, [r2, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <__NVIC_GetPriorityGrouping+0x18>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 0307 	and.w	r3, r3, #7
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	2b00      	cmp	r3, #0
 8002258:	db0b      	blt.n	8002272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	f003 021f 	and.w	r2, r3, #31
 8002260:	4907      	ldr	r1, [pc, #28]	; (8002280 <__NVIC_EnableIRQ+0x38>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2001      	movs	r0, #1
 800226a:	fa00 f202 	lsl.w	r2, r0, r2
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000e100 	.word	0xe000e100

08002284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	2b00      	cmp	r3, #0
 8002296:	db0a      	blt.n	80022ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	490c      	ldr	r1, [pc, #48]	; (80022d0 <__NVIC_SetPriority+0x4c>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	0112      	lsls	r2, r2, #4
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	440b      	add	r3, r1
 80022a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ac:	e00a      	b.n	80022c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4908      	ldr	r1, [pc, #32]	; (80022d4 <__NVIC_SetPriority+0x50>)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	3b04      	subs	r3, #4
 80022bc:	0112      	lsls	r2, r2, #4
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	440b      	add	r3, r1
 80022c2:	761a      	strb	r2, [r3, #24]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000e100 	.word	0xe000e100
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	; 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f1c3 0307 	rsb	r3, r3, #7
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	bf28      	it	cs
 80022f6:	2304      	movcs	r3, #4
 80022f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d902      	bls.n	8002308 <NVIC_EncodePriority+0x30>
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3b03      	subs	r3, #3
 8002306:	e000      	b.n	800230a <NVIC_EncodePriority+0x32>
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	f04f 32ff 	mov.w	r2, #4294967295
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43da      	mvns	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	401a      	ands	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002320:	f04f 31ff 	mov.w	r1, #4294967295
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	43d9      	mvns	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	4313      	orrs	r3, r2
         );
}
 8002332:	4618      	mov	r0, r3
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002350:	d301      	bcc.n	8002356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002352:	2301      	movs	r3, #1
 8002354:	e00f      	b.n	8002376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <SysTick_Config+0x40>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235e:	210f      	movs	r1, #15
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	f7ff ff8e 	bl	8002284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <SysTick_Config+0x40>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <SysTick_Config+0x40>)
 8002370:	2207      	movs	r2, #7
 8002372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	e000e010 	.word	0xe000e010

08002384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff29 	bl	80021e4 <__NVIC_SetPriorityGrouping>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ac:	f7ff ff3e 	bl	800222c <__NVIC_GetPriorityGrouping>
 80023b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	6978      	ldr	r0, [r7, #20]
 80023b8:	f7ff ff8e 	bl	80022d8 <NVIC_EncodePriority>
 80023bc:	4602      	mov	r2, r0
 80023be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff5d 	bl	8002284 <__NVIC_SetPriority>
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff31 	bl	8002248 <__NVIC_EnableIRQ>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ffa2 	bl	8002340 <SysTick_Config>
 80023fc:	4603      	mov	r3, r0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e014      	b.n	8002442 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	791b      	ldrb	r3, [r3, #4]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d105      	bne.n	800242e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7fe feab 	bl	8001184 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2202      	movs	r2, #2
 8002432:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800244a:	b480      	push	{r7}
 800244c:	b087      	sub	sp, #28
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	795b      	ldrb	r3, [r3, #5]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_DAC_ConfigChannel+0x18>
 800245e:	2302      	movs	r3, #2
 8002460:	e03c      	b.n	80024dc <HAL_DAC_ConfigChannel+0x92>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2202      	movs	r2, #2
 800246c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4013      	ands	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6819      	ldr	r1, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	22c0      	movs	r2, #192	; 0xc0
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43da      	mvns	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	400a      	ands	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	371c      	adds	r7, #28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0cf      	b.n	800269a <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a69      	ldr	r2, [pc, #420]	; (80026a4 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00e      	beq.n	8002522 <HAL_DFSDM_ChannelInit+0x3a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a67      	ldr	r2, [pc, #412]	; (80026a8 <HAL_DFSDM_ChannelInit+0x1c0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d009      	beq.n	8002522 <HAL_DFSDM_ChannelInit+0x3a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a66      	ldr	r2, [pc, #408]	; (80026ac <HAL_DFSDM_ChannelInit+0x1c4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d004      	beq.n	8002522 <HAL_DFSDM_ChannelInit+0x3a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a64      	ldr	r2, [pc, #400]	; (80026b0 <HAL_DFSDM_ChannelInit+0x1c8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d106      	bne.n	8002530 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8002522:	4b64      	ldr	r3, [pc, #400]	; (80026b4 <HAL_DFSDM_ChannelInit+0x1cc>)
 8002524:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8002526:	4b64      	ldr	r3, [pc, #400]	; (80026b8 <HAL_DFSDM_ChannelInit+0x1d0>)
 8002528:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 800252a:	4b5e      	ldr	r3, [pc, #376]	; (80026a4 <HAL_DFSDM_ChannelInit+0x1bc>)
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e005      	b.n	800253c <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8002530:	4b62      	ldr	r3, [pc, #392]	; (80026bc <HAL_DFSDM_ChannelInit+0x1d4>)
 8002532:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8002534:	4b62      	ldr	r3, [pc, #392]	; (80026c0 <HAL_DFSDM_ChannelInit+0x1d8>)
 8002536:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8002538:	4b62      	ldr	r3, [pc, #392]	; (80026c4 <HAL_DFSDM_ChannelInit+0x1dc>)
 800253a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f000 f8c1 	bl	80026c8 <DFSDM_GetChannelFromInstance>
 8002546:	4603      	mov	r3, r0
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0a0      	b.n	800269a <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7fe fe57 	bl	800120c <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d125      	bne.n	80025bc <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	431a      	orrs	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	791b      	ldrb	r3, [r3, #4]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d108      	bne.n	80025b0 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	041b      	lsls	r3, r3, #16
 80025aa:	431a      	orrs	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80025ca:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6819      	ldr	r1, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80025da:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80025e0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 020f 	bic.w	r2, r2, #15
 80025f8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002620:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6899      	ldr	r1, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	3b01      	subs	r3, #1
 8002632:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f002 0207 	and.w	r2, r2, #7
 800264c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002678:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f81e 	bl	80026c8 <DFSDM_GetChannelFromInstance>
 800268c:	4603      	mov	r3, r0
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40016000 	.word	0x40016000
 80026a8:	40016020 	.word	0x40016020
 80026ac:	40016040 	.word	0x40016040
 80026b0:	40016060 	.word	0x40016060
 80026b4:	200003d4 	.word	0x200003d4
 80026b8:	200003d8 	.word	0x200003d8
 80026bc:	200003e8 	.word	0x200003e8
 80026c0:	200003ec 	.word	0x200003ec
 80026c4:	40016400 	.word	0x40016400

080026c8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a24      	ldr	r2, [pc, #144]	; (8002764 <DFSDM_GetChannelFromInstance+0x9c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d003      	beq.n	80026e0 <DFSDM_GetChannelFromInstance+0x18>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a23      	ldr	r2, [pc, #140]	; (8002768 <DFSDM_GetChannelFromInstance+0xa0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d102      	bne.n	80026e6 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	e037      	b.n	8002756 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a20      	ldr	r2, [pc, #128]	; (800276c <DFSDM_GetChannelFromInstance+0xa4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d003      	beq.n	80026f6 <DFSDM_GetChannelFromInstance+0x2e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a1f      	ldr	r2, [pc, #124]	; (8002770 <DFSDM_GetChannelFromInstance+0xa8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d102      	bne.n	80026fc <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 80026f6:	2301      	movs	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	e02c      	b.n	8002756 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a1d      	ldr	r2, [pc, #116]	; (8002774 <DFSDM_GetChannelFromInstance+0xac>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d003      	beq.n	800270c <DFSDM_GetChannelFromInstance+0x44>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a1c      	ldr	r2, [pc, #112]	; (8002778 <DFSDM_GetChannelFromInstance+0xb0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d102      	bne.n	8002712 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 800270c:	2302      	movs	r3, #2
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	e021      	b.n	8002756 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a19      	ldr	r2, [pc, #100]	; (800277c <DFSDM_GetChannelFromInstance+0xb4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d003      	beq.n	8002722 <DFSDM_GetChannelFromInstance+0x5a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a18      	ldr	r2, [pc, #96]	; (8002780 <DFSDM_GetChannelFromInstance+0xb8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d102      	bne.n	8002728 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8002722:	2303      	movs	r3, #3
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	e016      	b.n	8002756 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a16      	ldr	r2, [pc, #88]	; (8002784 <DFSDM_GetChannelFromInstance+0xbc>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d102      	bne.n	8002736 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8002730:	2304      	movs	r3, #4
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	e00f      	b.n	8002756 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a13      	ldr	r2, [pc, #76]	; (8002788 <DFSDM_GetChannelFromInstance+0xc0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d102      	bne.n	8002744 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 800273e:	2305      	movs	r3, #5
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	e008      	b.n	8002756 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a11      	ldr	r2, [pc, #68]	; (800278c <DFSDM_GetChannelFromInstance+0xc4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d102      	bne.n	8002752 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 800274c:	2306      	movs	r3, #6
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e001      	b.n	8002756 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8002752:	2307      	movs	r3, #7
 8002754:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8002756:	68fb      	ldr	r3, [r7, #12]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40016000 	.word	0x40016000
 8002768:	40016400 	.word	0x40016400
 800276c:	40016020 	.word	0x40016020
 8002770:	40016420 	.word	0x40016420
 8002774:	40016040 	.word	0x40016040
 8002778:	40016440 	.word	0x40016440
 800277c:	40016060 	.word	0x40016060
 8002780:	40016460 	.word	0x40016460
 8002784:	40016480 	.word	0x40016480
 8002788:	400164a0 	.word	0x400164a0
 800278c:	400164c0 	.word	0x400164c0

08002790 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e081      	b.n	80028a6 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe fe78 	bl	80014ac <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2224      	movs	r2, #36	; 0x24
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027f0:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d107      	bne.n	800280a <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	e006      	b.n	8002818 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002816:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d104      	bne.n	800282a <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002828:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283c:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800284c:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	ea42 0103 	orr.w	r1, r2, r3
                          (hfmpi2c->Init.OwnAddress2Masks << 8));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69d9      	ldr	r1, [r3, #28]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1a      	ldr	r2, [r3, #32]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d138      	bne.n	8002936 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e032      	b.n	8002938 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2224      	movs	r2, #36	; 0x24
 80028de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0201 	bic.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002900:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6819      	ldr	r1, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	e000      	b.n	8002938 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002936:	2302      	movs	r3, #2
  }
}
 8002938:	4618      	mov	r0, r3
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e165      	b.n	8002c2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002960:	2201      	movs	r2, #1
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	429a      	cmp	r2, r3
 800297a:	f040 8154 	bne.w	8002c26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d005      	beq.n	8002996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002992:	2b02      	cmp	r3, #2
 8002994:	d130      	bne.n	80029f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 0201 	and.w	r2, r3, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d017      	beq.n	8002a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d123      	bne.n	8002a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	08da      	lsrs	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3208      	adds	r2, #8
 8002a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	08da      	lsrs	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3208      	adds	r2, #8
 8002a82:	69b9      	ldr	r1, [r7, #24]
 8002a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0203 	and.w	r2, r3, #3
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80ae 	beq.w	8002c26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b5d      	ldr	r3, [pc, #372]	; (8002c44 <HAL_GPIO_Init+0x300>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a5c      	ldr	r2, [pc, #368]	; (8002c44 <HAL_GPIO_Init+0x300>)
 8002ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b5a      	ldr	r3, [pc, #360]	; (8002c44 <HAL_GPIO_Init+0x300>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae6:	4a58      	ldr	r2, [pc, #352]	; (8002c48 <HAL_GPIO_Init+0x304>)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a4f      	ldr	r2, [pc, #316]	; (8002c4c <HAL_GPIO_Init+0x308>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d025      	beq.n	8002b5e <HAL_GPIO_Init+0x21a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a4e      	ldr	r2, [pc, #312]	; (8002c50 <HAL_GPIO_Init+0x30c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01f      	beq.n	8002b5a <HAL_GPIO_Init+0x216>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4d      	ldr	r2, [pc, #308]	; (8002c54 <HAL_GPIO_Init+0x310>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d019      	beq.n	8002b56 <HAL_GPIO_Init+0x212>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4c      	ldr	r2, [pc, #304]	; (8002c58 <HAL_GPIO_Init+0x314>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <HAL_GPIO_Init+0x20e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4b      	ldr	r2, [pc, #300]	; (8002c5c <HAL_GPIO_Init+0x318>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d00d      	beq.n	8002b4e <HAL_GPIO_Init+0x20a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4a      	ldr	r2, [pc, #296]	; (8002c60 <HAL_GPIO_Init+0x31c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d007      	beq.n	8002b4a <HAL_GPIO_Init+0x206>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a49      	ldr	r2, [pc, #292]	; (8002c64 <HAL_GPIO_Init+0x320>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_GPIO_Init+0x202>
 8002b42:	2306      	movs	r3, #6
 8002b44:	e00c      	b.n	8002b60 <HAL_GPIO_Init+0x21c>
 8002b46:	2307      	movs	r3, #7
 8002b48:	e00a      	b.n	8002b60 <HAL_GPIO_Init+0x21c>
 8002b4a:	2305      	movs	r3, #5
 8002b4c:	e008      	b.n	8002b60 <HAL_GPIO_Init+0x21c>
 8002b4e:	2304      	movs	r3, #4
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x21c>
 8002b52:	2303      	movs	r3, #3
 8002b54:	e004      	b.n	8002b60 <HAL_GPIO_Init+0x21c>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e002      	b.n	8002b60 <HAL_GPIO_Init+0x21c>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_GPIO_Init+0x21c>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	f002 0203 	and.w	r2, r2, #3
 8002b66:	0092      	lsls	r2, r2, #2
 8002b68:	4093      	lsls	r3, r2
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b70:	4935      	ldr	r1, [pc, #212]	; (8002c48 <HAL_GPIO_Init+0x304>)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	3302      	adds	r3, #2
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b7e:	4b3a      	ldr	r3, [pc, #232]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ba2:	4a31      	ldr	r2, [pc, #196]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba8:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bcc:	4a26      	ldr	r2, [pc, #152]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bd2:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c20:	4a11      	ldr	r2, [pc, #68]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2b0f      	cmp	r3, #15
 8002c30:	f67f ae96 	bls.w	8002960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3724      	adds	r7, #36	; 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40013800 	.word	0x40013800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40020400 	.word	0x40020400
 8002c54:	40020800 	.word	0x40020800
 8002c58:	40020c00 	.word	0x40020c00
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40021400 	.word	0x40021400
 8002c64:	40021800 	.word	0x40021800
 8002c68:	40013c00 	.word	0x40013c00

08002c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	807b      	strh	r3, [r7, #2]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c7c:	787b      	ldrb	r3, [r7, #1]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c82:	887a      	ldrh	r2, [r7, #2]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c88:	e003      	b.n	8002c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c8a:	887b      	ldrh	r3, [r7, #2]
 8002c8c:	041a      	lsls	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	619a      	str	r2, [r3, #24]
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cb0:	887a      	ldrh	r2, [r7, #2]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	041a      	lsls	r2, r3, #16
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	43d9      	mvns	r1, r3
 8002cbc:	887b      	ldrh	r3, [r7, #2]
 8002cbe:	400b      	ands	r3, r1
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	619a      	str	r2, [r3, #24]
}
 8002cc6:	bf00      	nop
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 ff38 	bl	8006b5e <USB_GetMode>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	f040 80f6 	bne.w	8002ee2 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 ff1c 	bl	8006b38 <USB_ReadInterrupts>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80ec 	beq.w	8002ee0 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f003 ff13 	bl	8006b38 <USB_ReadInterrupts>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d1c:	d104      	bne.n	8002d28 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d26:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f003 ff03 	bl	8006b38 <USB_ReadInterrupts>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d3c:	d104      	bne.n	8002d48 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d46:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f003 fef3 	bl	8006b38 <USB_ReadInterrupts>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d5c:	d104      	bne.n	8002d68 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d66:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 fee3 	bl	8006b38 <USB_ReadInterrupts>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d103      	bne.n	8002d84 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2202      	movs	r2, #2
 8002d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fed5 	bl	8006b38 <USB_ReadInterrupts>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d98:	d11c      	bne.n	8002dd4 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002da2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10f      	bne.n	8002dd4 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002db4:	2110      	movs	r1, #16
 8002db6:	6938      	ldr	r0, [r7, #16]
 8002db8:	f003 fe02 	bl	80069c0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002dbc:	6938      	ldr	r0, [r7, #16]
 8002dbe:	f003 fe33 	bl	8006a28 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f003 fed6 	bl	8006b7a <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f004 f967 	bl	80070a2 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f003 fead 	bl	8006b38 <USB_ReadInterrupts>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de8:	d102      	bne.n	8002df0 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f001 f829 	bl	8003e42 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f003 fe9f 	bl	8006b38 <USB_ReadInterrupts>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d106      	bne.n	8002e12 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f004 f930 	bl	800706a <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2208      	movs	r2, #8
 8002e10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 fe8e 	bl	8006b38 <USB_ReadInterrupts>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b10      	cmp	r3, #16
 8002e24:	d101      	bne.n	8002e2a <HAL_HCD_IRQHandler+0x158>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_HCD_IRQHandler+0x15a>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d012      	beq.n	8002e56 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0210 	bic.w	r2, r2, #16
 8002e3e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 ff2c 	bl	8003c9e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699a      	ldr	r2, [r3, #24]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0210 	orr.w	r2, r2, #16
 8002e54:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f003 fe6c 	bl	8006b38 <USB_ReadInterrupts>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e6a:	d13a      	bne.n	8002ee2 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f003 febc 	bl	8006bee <USB_HC_ReadInterrupt>
 8002e76:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	e025      	b.n	8002eca <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d018      	beq.n	8002ec4 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea8:	d106      	bne.n	8002eb8 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f836 	bl	8002f22 <HCD_HC_IN_IRQHandler>
 8002eb6:	e005      	b.n	8002ec4 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fb84 	bl	80035cc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d3d4      	bcc.n	8002e7e <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002edc:	615a      	str	r2, [r3, #20]
 8002ede:	e000      	b.n	8002ee2 <HAL_HCD_IRQHandler+0x210>
      return;
 8002ee0:	bf00      	nop
    }
  }
}
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_HCD_Stop+0x16>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e00d      	b.n	8002f1a <HAL_HCD_Stop+0x32>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 ff7c 	bl	8006e08 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b086      	sub	sp, #24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d11a      	bne.n	8002f88 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5e:	461a      	mov	r2, r3
 8002f60:	2304      	movs	r3, #4
 8002f62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	3361      	adds	r3, #97	; 0x61
 8002f72:	2206      	movs	r2, #6
 8002f74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f003 fe45 	bl	8006c10 <USB_HC_Halt>
 8002f86:	e0af      	b.n	80030e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f9e:	d11b      	bne.n	8002fd8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	461a      	mov	r2, r3
 8002fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	212c      	movs	r1, #44	; 0x2c
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3361      	adds	r3, #97	; 0x61
 8002fc2:	2207      	movs	r2, #7
 8002fc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f003 fe1d 	bl	8006c10 <USB_HC_Halt>
 8002fd6:	e087      	b.n	80030e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	d109      	bne.n	8003002 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	6093      	str	r3, [r2, #8]
 8003000:	e072      	b.n	80030e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b08      	cmp	r3, #8
 8003016:	d11a      	bne.n	800304e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003024:	461a      	mov	r2, r3
 8003026:	2308      	movs	r3, #8
 8003028:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	3361      	adds	r3, #97	; 0x61
 8003038:	2205      	movs	r2, #5
 800303a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	4611      	mov	r1, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f003 fde2 	bl	8006c10 <USB_HC_Halt>
 800304c:	e04c      	b.n	80030e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4413      	add	r3, r2
 8003056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003064:	d11b      	bne.n	800309e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003072:	461a      	mov	r2, r3
 8003074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003078:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	212c      	movs	r1, #44	; 0x2c
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	4413      	add	r3, r2
 8003086:	3361      	adds	r3, #97	; 0x61
 8003088:	2208      	movs	r2, #8
 800308a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	4611      	mov	r1, r2
 8003096:	4618      	mov	r0, r3
 8003098:	f003 fdba 	bl	8006c10 <USB_HC_Halt>
 800309c:	e024      	b.n	80030e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b0:	2b80      	cmp	r3, #128	; 0x80
 80030b2:	d119      	bne.n	80030e8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c0:	461a      	mov	r2, r3
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	3361      	adds	r3, #97	; 0x61
 80030d4:	2206      	movs	r2, #6
 80030d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f003 fd94 	bl	8006c10 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030fe:	d112      	bne.n	8003126 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f003 fd80 	bl	8006c10 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	461a      	mov	r2, r3
 800311e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003122:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003124:	e24e      	b.n	80035c4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4413      	add	r3, r2
 800312e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	f040 80df 	bne.w	80032fc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d019      	beq.n	800317a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	212c      	movs	r1, #44	; 0x2c
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	4413      	add	r3, r2
 8003152:	3348      	adds	r3, #72	; 0x48
 8003154:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	0159      	lsls	r1, r3, #5
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	440b      	add	r3, r1
 800315e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003168:	1ad2      	subs	r2, r2, r3
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	202c      	movs	r0, #44	; 0x2c
 8003170:	fb00 f303 	mul.w	r3, r0, r3
 8003174:	440b      	add	r3, r1
 8003176:	3350      	adds	r3, #80	; 0x50
 8003178:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	4413      	add	r3, r2
 8003186:	3361      	adds	r3, #97	; 0x61
 8003188:	2201      	movs	r2, #1
 800318a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	335c      	adds	r3, #92	; 0x5c
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031aa:	461a      	mov	r2, r3
 80031ac:	2301      	movs	r3, #1
 80031ae:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	212c      	movs	r1, #44	; 0x2c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	333f      	adds	r3, #63	; 0x3f
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d009      	beq.n	80031d8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	212c      	movs	r1, #44	; 0x2c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	333f      	adds	r3, #63	; 0x3f
 80031d2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d111      	bne.n	80031fc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f003 fd14 	bl	8006c10 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f4:	461a      	mov	r2, r3
 80031f6:	2310      	movs	r3, #16
 80031f8:	6093      	str	r3, [r2, #8]
 80031fa:	e03a      	b.n	8003272 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	212c      	movs	r1, #44	; 0x2c
 8003202:	fb01 f303 	mul.w	r3, r1, r3
 8003206:	4413      	add	r3, r2
 8003208:	333f      	adds	r3, #63	; 0x3f
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d009      	beq.n	8003224 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	333f      	adds	r3, #63	; 0x3f
 800321e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003220:	2b01      	cmp	r3, #1
 8003222:	d126      	bne.n	8003272 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4413      	add	r3, r2
 800322c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	0151      	lsls	r1, r2, #5
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	440a      	add	r2, r1
 800323a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800323e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003242:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	212c      	movs	r1, #44	; 0x2c
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	4413      	add	r3, r2
 8003250:	3360      	adds	r3, #96	; 0x60
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	b2d9      	uxtb	r1, r3
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	202c      	movs	r0, #44	; 0x2c
 8003260:	fb00 f303 	mul.w	r3, r0, r3
 8003264:	4413      	add	r3, r2
 8003266:	3360      	adds	r3, #96	; 0x60
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f003 ff26 	bl	80070be <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d12b      	bne.n	80032d2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	212c      	movs	r1, #44	; 0x2c
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	4413      	add	r3, r2
 8003286:	3348      	adds	r3, #72	; 0x48
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	202c      	movs	r0, #44	; 0x2c
 8003290:	fb00 f202 	mul.w	r2, r0, r2
 8003294:	440a      	add	r2, r1
 8003296:	3240      	adds	r2, #64	; 0x40
 8003298:	8812      	ldrh	r2, [r2, #0]
 800329a:	fbb3 f3f2 	udiv	r3, r3, r2
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 818e 	beq.w	80035c4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	3354      	adds	r3, #84	; 0x54
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	f083 0301 	eor.w	r3, r3, #1
 80032bc:	b2d8      	uxtb	r0, r3
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	3354      	adds	r3, #84	; 0x54
 80032cc:	4602      	mov	r2, r0
 80032ce:	701a      	strb	r2, [r3, #0]
}
 80032d0:	e178      	b.n	80035c4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	212c      	movs	r1, #44	; 0x2c
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	4413      	add	r3, r2
 80032de:	3354      	adds	r3, #84	; 0x54
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	f083 0301 	eor.w	r3, r3, #1
 80032e6:	b2d8      	uxtb	r0, r3
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	3354      	adds	r3, #84	; 0x54
 80032f6:	4602      	mov	r2, r0
 80032f8:	701a      	strb	r2, [r3, #0]
}
 80032fa:	e163      	b.n	80035c4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b02      	cmp	r3, #2
 8003310:	f040 80f6 	bne.w	8003500 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	212c      	movs	r1, #44	; 0x2c
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	4413      	add	r3, r2
 8003320:	3361      	adds	r3, #97	; 0x61
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d109      	bne.n	800333c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	3360      	adds	r3, #96	; 0x60
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e0c9      	b.n	80034d0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	3361      	adds	r3, #97	; 0x61
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b05      	cmp	r3, #5
 800334e:	d109      	bne.n	8003364 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	212c      	movs	r1, #44	; 0x2c
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	4413      	add	r3, r2
 800335c:	3360      	adds	r3, #96	; 0x60
 800335e:	2205      	movs	r2, #5
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e0b5      	b.n	80034d0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	3361      	adds	r3, #97	; 0x61
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b06      	cmp	r3, #6
 8003376:	d009      	beq.n	800338c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	212c      	movs	r1, #44	; 0x2c
 800337e:	fb01 f303 	mul.w	r3, r1, r3
 8003382:	4413      	add	r3, r2
 8003384:	3361      	adds	r3, #97	; 0x61
 8003386:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003388:	2b08      	cmp	r3, #8
 800338a:	d150      	bne.n	800342e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	212c      	movs	r1, #44	; 0x2c
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	335c      	adds	r3, #92	; 0x5c
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	202c      	movs	r0, #44	; 0x2c
 80033a4:	fb00 f303 	mul.w	r3, r0, r3
 80033a8:	440b      	add	r3, r1
 80033aa:	335c      	adds	r3, #92	; 0x5c
 80033ac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	212c      	movs	r1, #44	; 0x2c
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	4413      	add	r3, r2
 80033ba:	335c      	adds	r3, #92	; 0x5c
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d912      	bls.n	80033e8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	335c      	adds	r3, #92	; 0x5c
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3360      	adds	r3, #96	; 0x60
 80033e2:	2204      	movs	r2, #4
 80033e4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033e6:	e073      	b.n	80034d0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	212c      	movs	r1, #44	; 0x2c
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	3360      	adds	r3, #96	; 0x60
 80033f6:	2202      	movs	r2, #2
 80033f8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4413      	add	r3, r2
 8003402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003410:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003418:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4413      	add	r3, r2
 8003422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003426:	461a      	mov	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800342c:	e050      	b.n	80034d0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	212c      	movs	r1, #44	; 0x2c
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	4413      	add	r3, r2
 800343a:	3361      	adds	r3, #97	; 0x61
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b03      	cmp	r3, #3
 8003440:	d122      	bne.n	8003488 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	212c      	movs	r1, #44	; 0x2c
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	4413      	add	r3, r2
 800344e:	3360      	adds	r3, #96	; 0x60
 8003450:	2202      	movs	r2, #2
 8003452:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4413      	add	r3, r2
 800345c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800346a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003472:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4413      	add	r3, r2
 800347c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003480:	461a      	mov	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	e023      	b.n	80034d0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	3361      	adds	r3, #97	; 0x61
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b07      	cmp	r3, #7
 800349a:	d119      	bne.n	80034d0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	212c      	movs	r1, #44	; 0x2c
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	335c      	adds	r3, #92	; 0x5c
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	202c      	movs	r0, #44	; 0x2c
 80034b4:	fb00 f303 	mul.w	r3, r0, r3
 80034b8:	440b      	add	r3, r1
 80034ba:	335c      	adds	r3, #92	; 0x5c
 80034bc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	212c      	movs	r1, #44	; 0x2c
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	3360      	adds	r3, #96	; 0x60
 80034cc:	2204      	movs	r2, #4
 80034ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034dc:	461a      	mov	r2, r3
 80034de:	2302      	movs	r3, #2
 80034e0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	b2d9      	uxtb	r1, r3
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	202c      	movs	r0, #44	; 0x2c
 80034ec:	fb00 f303 	mul.w	r3, r0, r3
 80034f0:	4413      	add	r3, r2
 80034f2:	3360      	adds	r3, #96	; 0x60
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f003 fde0 	bl	80070be <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80034fe:	e061      	b.n	80035c4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b10      	cmp	r3, #16
 8003514:	d156      	bne.n	80035c4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	333f      	adds	r3, #63	; 0x3f
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b03      	cmp	r3, #3
 8003528:	d111      	bne.n	800354e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	212c      	movs	r1, #44	; 0x2c
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	4413      	add	r3, r2
 8003536:	335c      	adds	r3, #92	; 0x5c
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	4611      	mov	r1, r2
 8003546:	4618      	mov	r0, r3
 8003548:	f003 fb62 	bl	8006c10 <USB_HC_Halt>
 800354c:	e031      	b.n	80035b2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	212c      	movs	r1, #44	; 0x2c
 8003554:	fb01 f303 	mul.w	r3, r1, r3
 8003558:	4413      	add	r3, r2
 800355a:	333f      	adds	r3, #63	; 0x3f
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	212c      	movs	r1, #44	; 0x2c
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	4413      	add	r3, r2
 800356e:	333f      	adds	r3, #63	; 0x3f
 8003570:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003572:	2b02      	cmp	r3, #2
 8003574:	d11d      	bne.n	80035b2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	212c      	movs	r1, #44	; 0x2c
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	4413      	add	r3, r2
 8003582:	335c      	adds	r3, #92	; 0x5c
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d110      	bne.n	80035b2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	212c      	movs	r1, #44	; 0x2c
 8003596:	fb01 f303 	mul.w	r3, r1, r3
 800359a:	4413      	add	r3, r2
 800359c:	3361      	adds	r3, #97	; 0x61
 800359e:	2203      	movs	r2, #3
 80035a0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f003 fb2f 	bl	8006c10 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035be:	461a      	mov	r2, r3
 80035c0:	2310      	movs	r3, #16
 80035c2:	6093      	str	r3, [r2, #8]
}
 80035c4:	bf00      	nop
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d11a      	bne.n	8003632 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	4413      	add	r3, r2
 8003604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003608:	461a      	mov	r2, r3
 800360a:	2304      	movs	r3, #4
 800360c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	212c      	movs	r1, #44	; 0x2c
 8003614:	fb01 f303 	mul.w	r3, r1, r3
 8003618:	4413      	add	r3, r2
 800361a:	3361      	adds	r3, #97	; 0x61
 800361c:	2206      	movs	r2, #6
 800361e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f003 faf0 	bl	8006c10 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003630:	e331      	b.n	8003c96 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	4413      	add	r3, r2
 800363a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b20      	cmp	r3, #32
 8003646:	d12e      	bne.n	80036a6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003654:	461a      	mov	r2, r3
 8003656:	2320      	movs	r3, #32
 8003658:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	212c      	movs	r1, #44	; 0x2c
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	4413      	add	r3, r2
 8003666:	333d      	adds	r3, #61	; 0x3d
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b01      	cmp	r3, #1
 800366c:	f040 8313 	bne.w	8003c96 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	212c      	movs	r1, #44	; 0x2c
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	4413      	add	r3, r2
 800367c:	333d      	adds	r3, #61	; 0x3d
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	212c      	movs	r1, #44	; 0x2c
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	4413      	add	r3, r2
 800368e:	3360      	adds	r3, #96	; 0x60
 8003690:	2202      	movs	r2, #2
 8003692:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f003 fab6 	bl	8006c10 <USB_HC_Halt>
}
 80036a4:	e2f7      	b.n	8003c96 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036bc:	d112      	bne.n	80036e4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ca:	461a      	mov	r2, r3
 80036cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036d0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f003 fa97 	bl	8006c10 <USB_HC_Halt>
}
 80036e2:	e2d8      	b.n	8003c96 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d140      	bne.n	800377c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	335c      	adds	r3, #92	; 0x5c
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	4413      	add	r3, r2
 8003714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d111      	bne.n	8003746 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	212c      	movs	r1, #44	; 0x2c
 8003728:	fb01 f303 	mul.w	r3, r1, r3
 800372c:	4413      	add	r3, r2
 800372e:	333d      	adds	r3, #61	; 0x3d
 8003730:	2201      	movs	r2, #1
 8003732:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	4413      	add	r3, r2
 800373c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003740:	461a      	mov	r2, r3
 8003742:	2340      	movs	r3, #64	; 0x40
 8003744:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	461a      	mov	r2, r3
 8003754:	2301      	movs	r3, #1
 8003756:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	212c      	movs	r1, #44	; 0x2c
 800375e:	fb01 f303 	mul.w	r3, r1, r3
 8003762:	4413      	add	r3, r2
 8003764:	3361      	adds	r3, #97	; 0x61
 8003766:	2201      	movs	r2, #1
 8003768:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f003 fa4b 	bl	8006c10 <USB_HC_Halt>
}
 800377a:	e28c      	b.n	8003c96 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	4413      	add	r3, r2
 8003784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378e:	2b40      	cmp	r3, #64	; 0x40
 8003790:	d12c      	bne.n	80037ec <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	212c      	movs	r1, #44	; 0x2c
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	4413      	add	r3, r2
 800379e:	3361      	adds	r3, #97	; 0x61
 80037a0:	2204      	movs	r2, #4
 80037a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	212c      	movs	r1, #44	; 0x2c
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	4413      	add	r3, r2
 80037b0:	333d      	adds	r3, #61	; 0x3d
 80037b2:	2201      	movs	r2, #1
 80037b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	212c      	movs	r1, #44	; 0x2c
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	4413      	add	r3, r2
 80037c2:	335c      	adds	r3, #92	; 0x5c
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	4611      	mov	r1, r2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f003 fa1c 	bl	8006c10 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e4:	461a      	mov	r2, r3
 80037e6:	2340      	movs	r3, #64	; 0x40
 80037e8:	6093      	str	r3, [r2, #8]
}
 80037ea:	e254      	b.n	8003c96 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d11a      	bne.n	8003838 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	4413      	add	r3, r2
 800380a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380e:	461a      	mov	r2, r3
 8003810:	2308      	movs	r3, #8
 8003812:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	212c      	movs	r1, #44	; 0x2c
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	4413      	add	r3, r2
 8003820:	3361      	adds	r3, #97	; 0x61
 8003822:	2205      	movs	r2, #5
 8003824:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	4611      	mov	r1, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f003 f9ed 	bl	8006c10 <USB_HC_Halt>
}
 8003836:	e22e      	b.n	8003c96 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	4413      	add	r3, r2
 8003840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b10      	cmp	r3, #16
 800384c:	d140      	bne.n	80038d0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	212c      	movs	r1, #44	; 0x2c
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	4413      	add	r3, r2
 800385a:	335c      	adds	r3, #92	; 0x5c
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	3361      	adds	r3, #97	; 0x61
 800386e:	2203      	movs	r2, #3
 8003870:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	333d      	adds	r3, #61	; 0x3d
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d112      	bne.n	80038ac <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	212c      	movs	r1, #44	; 0x2c
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	4413      	add	r3, r2
 8003892:	333c      	adds	r3, #60	; 0x3c
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d108      	bne.n	80038ac <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	212c      	movs	r1, #44	; 0x2c
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	333d      	adds	r3, #61	; 0x3d
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	4611      	mov	r1, r2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f003 f9aa 	bl	8006c10 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c8:	461a      	mov	r2, r3
 80038ca:	2310      	movs	r3, #16
 80038cc:	6093      	str	r3, [r2, #8]
}
 80038ce:	e1e2      	b.n	8003c96 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	2b80      	cmp	r3, #128	; 0x80
 80038e4:	d164      	bne.n	80039b0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d111      	bne.n	8003912 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	212c      	movs	r1, #44	; 0x2c
 80038f4:	fb01 f303 	mul.w	r3, r1, r3
 80038f8:	4413      	add	r3, r2
 80038fa:	3361      	adds	r3, #97	; 0x61
 80038fc:	2206      	movs	r2, #6
 80038fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f003 f980 	bl	8006c10 <USB_HC_Halt>
 8003910:	e044      	b.n	800399c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	212c      	movs	r1, #44	; 0x2c
 8003918:	fb01 f303 	mul.w	r3, r1, r3
 800391c:	4413      	add	r3, r2
 800391e:	335c      	adds	r3, #92	; 0x5c
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	202c      	movs	r0, #44	; 0x2c
 800392a:	fb00 f303 	mul.w	r3, r0, r3
 800392e:	440b      	add	r3, r1
 8003930:	335c      	adds	r3, #92	; 0x5c
 8003932:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	212c      	movs	r1, #44	; 0x2c
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	4413      	add	r3, r2
 8003940:	335c      	adds	r3, #92	; 0x5c
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d920      	bls.n	800398a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	212c      	movs	r1, #44	; 0x2c
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	335c      	adds	r3, #92	; 0x5c
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	212c      	movs	r1, #44	; 0x2c
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	4413      	add	r3, r2
 8003966:	3360      	adds	r3, #96	; 0x60
 8003968:	2204      	movs	r2, #4
 800396a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	b2d9      	uxtb	r1, r3
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	202c      	movs	r0, #44	; 0x2c
 8003976:	fb00 f303 	mul.w	r3, r0, r3
 800397a:	4413      	add	r3, r2
 800397c:	3360      	adds	r3, #96	; 0x60
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f003 fb9b 	bl	80070be <HAL_HCD_HC_NotifyURBChange_Callback>
 8003988:	e008      	b.n	800399c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	212c      	movs	r1, #44	; 0x2c
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	4413      	add	r3, r2
 8003996:	3360      	adds	r3, #96	; 0x60
 8003998:	2202      	movs	r2, #2
 800399a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a8:	461a      	mov	r2, r3
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	6093      	str	r3, [r2, #8]
}
 80039ae:	e172      	b.n	8003c96 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c6:	d11b      	bne.n	8003a00 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	212c      	movs	r1, #44	; 0x2c
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	4413      	add	r3, r2
 80039d4:	3361      	adds	r3, #97	; 0x61
 80039d6:	2208      	movs	r2, #8
 80039d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	4611      	mov	r1, r2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f003 f913 	bl	8006c10 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f6:	461a      	mov	r2, r3
 80039f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039fc:	6093      	str	r3, [r2, #8]
}
 80039fe:	e14a      	b.n	8003c96 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	f040 813f 	bne.w	8003c96 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	212c      	movs	r1, #44	; 0x2c
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	3361      	adds	r3, #97	; 0x61
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d17d      	bne.n	8003b28 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	212c      	movs	r1, #44	; 0x2c
 8003a32:	fb01 f303 	mul.w	r3, r1, r3
 8003a36:	4413      	add	r3, r2
 8003a38:	3360      	adds	r3, #96	; 0x60
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	212c      	movs	r1, #44	; 0x2c
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	4413      	add	r3, r2
 8003a4a:	333f      	adds	r3, #63	; 0x3f
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d00a      	beq.n	8003a68 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	212c      	movs	r1, #44	; 0x2c
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	333f      	adds	r3, #63	; 0x3f
 8003a60:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	f040 8100 	bne.w	8003c68 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d113      	bne.n	8003a98 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	212c      	movs	r1, #44	; 0x2c
 8003a76:	fb01 f303 	mul.w	r3, r1, r3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3355      	adds	r3, #85	; 0x55
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	f083 0301 	eor.w	r3, r3, #1
 8003a84:	b2d8      	uxtb	r0, r3
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	3355      	adds	r3, #85	; 0x55
 8003a94:	4602      	mov	r2, r0
 8003a96:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	f040 80e3 	bne.w	8003c68 <HCD_HC_OUT_IRQHandler+0x69c>
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	212c      	movs	r1, #44	; 0x2c
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	4413      	add	r3, r2
 8003aae:	334c      	adds	r3, #76	; 0x4c
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80d8 	beq.w	8003c68 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	212c      	movs	r1, #44	; 0x2c
 8003abe:	fb01 f303 	mul.w	r3, r1, r3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	334c      	adds	r3, #76	; 0x4c
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	202c      	movs	r0, #44	; 0x2c
 8003ace:	fb00 f202 	mul.w	r2, r0, r2
 8003ad2:	440a      	add	r2, r1
 8003ad4:	3240      	adds	r2, #64	; 0x40
 8003ad6:	8812      	ldrh	r2, [r2, #0]
 8003ad8:	4413      	add	r3, r2
 8003ada:	3b01      	subs	r3, #1
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	202c      	movs	r0, #44	; 0x2c
 8003ae2:	fb00 f202 	mul.w	r2, r0, r2
 8003ae6:	440a      	add	r2, r1
 8003ae8:	3240      	adds	r2, #64	; 0x40
 8003aea:	8812      	ldrh	r2, [r2, #0]
 8003aec:	fbb3 f3f2 	udiv	r3, r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80b5 	beq.w	8003c68 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	212c      	movs	r1, #44	; 0x2c
 8003b04:	fb01 f303 	mul.w	r3, r1, r3
 8003b08:	4413      	add	r3, r2
 8003b0a:	3355      	adds	r3, #85	; 0x55
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	f083 0301 	eor.w	r3, r3, #1
 8003b12:	b2d8      	uxtb	r0, r3
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	212c      	movs	r1, #44	; 0x2c
 8003b1a:	fb01 f303 	mul.w	r3, r1, r3
 8003b1e:	4413      	add	r3, r2
 8003b20:	3355      	adds	r3, #85	; 0x55
 8003b22:	4602      	mov	r2, r0
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	e09f      	b.n	8003c68 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	212c      	movs	r1, #44	; 0x2c
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	3361      	adds	r3, #97	; 0x61
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d109      	bne.n	8003b50 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	212c      	movs	r1, #44	; 0x2c
 8003b42:	fb01 f303 	mul.w	r3, r1, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	3360      	adds	r3, #96	; 0x60
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	e08b      	b.n	8003c68 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	212c      	movs	r1, #44	; 0x2c
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3361      	adds	r3, #97	; 0x61
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d109      	bne.n	8003b78 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	212c      	movs	r1, #44	; 0x2c
 8003b6a:	fb01 f303 	mul.w	r3, r1, r3
 8003b6e:	4413      	add	r3, r2
 8003b70:	3360      	adds	r3, #96	; 0x60
 8003b72:	2202      	movs	r2, #2
 8003b74:	701a      	strb	r2, [r3, #0]
 8003b76:	e077      	b.n	8003c68 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	212c      	movs	r1, #44	; 0x2c
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	3361      	adds	r3, #97	; 0x61
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b05      	cmp	r3, #5
 8003b8a:	d109      	bne.n	8003ba0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	212c      	movs	r1, #44	; 0x2c
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	4413      	add	r3, r2
 8003b98:	3360      	adds	r3, #96	; 0x60
 8003b9a:	2205      	movs	r2, #5
 8003b9c:	701a      	strb	r2, [r3, #0]
 8003b9e:	e063      	b.n	8003c68 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	212c      	movs	r1, #44	; 0x2c
 8003ba6:	fb01 f303 	mul.w	r3, r1, r3
 8003baa:	4413      	add	r3, r2
 8003bac:	3361      	adds	r3, #97	; 0x61
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b06      	cmp	r3, #6
 8003bb2:	d009      	beq.n	8003bc8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	212c      	movs	r1, #44	; 0x2c
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3361      	adds	r3, #97	; 0x61
 8003bc2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d14f      	bne.n	8003c68 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	212c      	movs	r1, #44	; 0x2c
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	335c      	adds	r3, #92	; 0x5c
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	202c      	movs	r0, #44	; 0x2c
 8003be0:	fb00 f303 	mul.w	r3, r0, r3
 8003be4:	440b      	add	r3, r1
 8003be6:	335c      	adds	r3, #92	; 0x5c
 8003be8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	212c      	movs	r1, #44	; 0x2c
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	335c      	adds	r3, #92	; 0x5c
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d912      	bls.n	8003c24 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	212c      	movs	r1, #44	; 0x2c
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	4413      	add	r3, r2
 8003c0a:	335c      	adds	r3, #92	; 0x5c
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	212c      	movs	r1, #44	; 0x2c
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3360      	adds	r3, #96	; 0x60
 8003c1e:	2204      	movs	r2, #4
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e021      	b.n	8003c68 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	212c      	movs	r1, #44	; 0x2c
 8003c2a:	fb01 f303 	mul.w	r3, r1, r3
 8003c2e:	4413      	add	r3, r2
 8003c30:	3360      	adds	r3, #96	; 0x60
 8003c32:	2202      	movs	r2, #2
 8003c34:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c4c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c54:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c62:	461a      	mov	r2, r3
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c74:	461a      	mov	r2, r3
 8003c76:	2302      	movs	r3, #2
 8003c78:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	b2d9      	uxtb	r1, r3
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	202c      	movs	r0, #44	; 0x2c
 8003c84:	fb00 f303 	mul.w	r3, r0, r3
 8003c88:	4413      	add	r3, r2
 8003c8a:	3360      	adds	r3, #96	; 0x60
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f003 fa14 	bl	80070be <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c96:	bf00      	nop
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b08a      	sub	sp, #40	; 0x28
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	0c5b      	lsrs	r3, r3, #17
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	091b      	lsrs	r3, r3, #4
 8003cce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cd2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d004      	beq.n	8003ce4 <HCD_RXQLVL_IRQHandler+0x46>
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2b05      	cmp	r3, #5
 8003cde:	f000 80a9 	beq.w	8003e34 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003ce2:	e0aa      	b.n	8003e3a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 80a6 	beq.w	8003e38 <HCD_RXQLVL_IRQHandler+0x19a>
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	212c      	movs	r1, #44	; 0x2c
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3344      	adds	r3, #68	; 0x44
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 809b 	beq.w	8003e38 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	212c      	movs	r1, #44	; 0x2c
 8003d08:	fb01 f303 	mul.w	r3, r1, r3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	3350      	adds	r3, #80	; 0x50
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	441a      	add	r2, r3
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	202c      	movs	r0, #44	; 0x2c
 8003d1c:	fb00 f303 	mul.w	r3, r0, r3
 8003d20:	440b      	add	r3, r1
 8003d22:	334c      	adds	r3, #76	; 0x4c
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d87a      	bhi.n	8003e20 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	212c      	movs	r1, #44	; 0x2c
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	4413      	add	r3, r2
 8003d3a:	3344      	adds	r3, #68	; 0x44
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	b292      	uxth	r2, r2
 8003d42:	4619      	mov	r1, r3
 8003d44:	f002 fea0 	bl	8006a88 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	212c      	movs	r1, #44	; 0x2c
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	4413      	add	r3, r2
 8003d54:	3344      	adds	r3, #68	; 0x44
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	441a      	add	r2, r3
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	202c      	movs	r0, #44	; 0x2c
 8003d62:	fb00 f303 	mul.w	r3, r0, r3
 8003d66:	440b      	add	r3, r1
 8003d68:	3344      	adds	r3, #68	; 0x44
 8003d6a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	212c      	movs	r1, #44	; 0x2c
 8003d72:	fb01 f303 	mul.w	r3, r1, r3
 8003d76:	4413      	add	r3, r2
 8003d78:	3350      	adds	r3, #80	; 0x50
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	441a      	add	r2, r3
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	202c      	movs	r0, #44	; 0x2c
 8003d86:	fb00 f303 	mul.w	r3, r0, r3
 8003d8a:	440b      	add	r3, r1
 8003d8c:	3350      	adds	r3, #80	; 0x50
 8003d8e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	0cdb      	lsrs	r3, r3, #19
 8003da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003da4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	212c      	movs	r1, #44	; 0x2c
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	4413      	add	r3, r2
 8003db2:	3340      	adds	r3, #64	; 0x40
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d13c      	bne.n	8003e38 <HCD_RXQLVL_IRQHandler+0x19a>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d039      	beq.n	8003e38 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dda:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003de2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df0:	461a      	mov	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	212c      	movs	r1, #44	; 0x2c
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	3354      	adds	r3, #84	; 0x54
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	f083 0301 	eor.w	r3, r3, #1
 8003e0a:	b2d8      	uxtb	r0, r3
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	212c      	movs	r1, #44	; 0x2c
 8003e12:	fb01 f303 	mul.w	r3, r1, r3
 8003e16:	4413      	add	r3, r2
 8003e18:	3354      	adds	r3, #84	; 0x54
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	701a      	strb	r2, [r3, #0]
      break;
 8003e1e:	e00b      	b.n	8003e38 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	212c      	movs	r1, #44	; 0x2c
 8003e26:	fb01 f303 	mul.w	r3, r1, r3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3360      	adds	r3, #96	; 0x60
 8003e2e:	2204      	movs	r2, #4
 8003e30:	701a      	strb	r2, [r3, #0]
      break;
 8003e32:	e001      	b.n	8003e38 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003e34:	bf00      	nop
 8003e36:	e000      	b.n	8003e3a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003e38:	bf00      	nop
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	3728      	adds	r7, #40	; 0x28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b086      	sub	sp, #24
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003e6e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d10b      	bne.n	8003e92 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d102      	bne.n	8003e8a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f003 f8fe 	bl	8007086 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f043 0302 	orr.w	r3, r3, #2
 8003e90:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d132      	bne.n	8003f02 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f043 0308 	orr.w	r3, r3, #8
 8003ea2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d126      	bne.n	8003efc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d113      	bne.n	8003ede <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003ebc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ec0:	d106      	bne.n	8003ed0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f002 fe56 	bl	8006b7a <USB_InitFSLSPClkSel>
 8003ece:	e011      	b.n	8003ef4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f002 fe4f 	bl	8006b7a <USB_InitFSLSPClkSel>
 8003edc:	e00a      	b.n	8003ef4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d106      	bne.n	8003ef4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eec:	461a      	mov	r2, r3
 8003eee:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ef2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f003 f8f0 	bl	80070da <HAL_HCD_PortEnabled_Callback>
 8003efa:	e002      	b.n	8003f02 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f003 f8fa 	bl	80070f6 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d103      	bne.n	8003f14 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f043 0320 	orr.w	r3, r3, #32
 8003f12:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	6013      	str	r3, [r2, #0]
}
 8003f20:	bf00      	nop
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e154      	b.n	80041e4 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a98      	ldr	r2, [pc, #608]	; (80041b4 <HAL_I2S_Init+0x28c>)
 8003f52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7fd fb05 	bl	8001564 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f70:	f023 030f 	bic.w	r3, r3, #15
 8003f74:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d06f      	beq.n	8004066 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d102      	bne.n	8003f94 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003f8e:	2310      	movs	r3, #16
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	e001      	b.n	8003f98 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003f94:	2320      	movs	r3, #32
 8003f96:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d802      	bhi.n	8003fa6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a83      	ldr	r2, [pc, #524]	; (80041b8 <HAL_I2S_Init+0x290>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d004      	beq.n	8003fba <HAL_I2S_Init+0x92>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a81      	ldr	r2, [pc, #516]	; (80041bc <HAL_I2S_Init+0x294>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d104      	bne.n	8003fc4 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8003fba:	2001      	movs	r0, #1
 8003fbc:	f001 f9a4 	bl	8005308 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	e003      	b.n	8003fcc <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8003fc4:	2002      	movs	r0, #2
 8003fc6:	f001 f99f 	bl	8005308 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fca:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd4:	d125      	bne.n	8004022 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d010      	beq.n	8004000 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffa:	3305      	adds	r3, #5
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	e01f      	b.n	8004040 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	fbb2 f2f3 	udiv	r2, r2, r3
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	461a      	mov	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	fbb2 f3f3 	udiv	r3, r2, r3
 800401c:	3305      	adds	r3, #5
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	e00e      	b.n	8004040 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	fbb2 f2f3 	udiv	r2, r2, r3
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	461a      	mov	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	fbb2 f3f3 	udiv	r3, r2, r3
 800403c:	3305      	adds	r3, #5
 800403e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4a5f      	ldr	r2, [pc, #380]	; (80041c0 <HAL_I2S_Init+0x298>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	08db      	lsrs	r3, r3, #3
 800404a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	61bb      	str	r3, [r7, #24]
 8004064:	e003      	b.n	800406e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004066:	2302      	movs	r3, #2
 8004068:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d902      	bls.n	800407a <HAL_I2S_Init+0x152>
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2bff      	cmp	r3, #255	; 0xff
 8004078:	d907      	bls.n	800408a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	f043 0210 	orr.w	r2, r3, #16
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0ac      	b.n	80041e4 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	ea42 0103 	orr.w	r1, r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	430a      	orrs	r2, r1
 800409c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80040a8:	f023 030f 	bic.w	r3, r3, #15
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6851      	ldr	r1, [r2, #4]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6892      	ldr	r2, [r2, #8]
 80040b4:	4311      	orrs	r1, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68d2      	ldr	r2, [r2, #12]
 80040ba:	4311      	orrs	r1, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6992      	ldr	r2, [r2, #24]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040cc:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b30      	cmp	r3, #48	; 0x30
 80040d4:	d003      	beq.n	80040de <HAL_I2S_Init+0x1b6>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2bb0      	cmp	r3, #176	; 0xb0
 80040dc:	d107      	bne.n	80040ee <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040ec:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d16e      	bne.n	80041d4 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a32      	ldr	r2, [pc, #200]	; (80041c4 <HAL_I2S_Init+0x29c>)
 80040fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2d      	ldr	r2, [pc, #180]	; (80041b8 <HAL_I2S_Init+0x290>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <HAL_I2S_Init+0x1e2>
 8004106:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <HAL_I2S_Init+0x2a0>)
 8004108:	e001      	b.n	800410e <HAL_I2S_Init+0x1e6>
 800410a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	4928      	ldr	r1, [pc, #160]	; (80041b8 <HAL_I2S_Init+0x290>)
 8004116:	428a      	cmp	r2, r1
 8004118:	d101      	bne.n	800411e <HAL_I2S_Init+0x1f6>
 800411a:	4a2b      	ldr	r2, [pc, #172]	; (80041c8 <HAL_I2S_Init+0x2a0>)
 800411c:	e001      	b.n	8004122 <HAL_I2S_Init+0x1fa>
 800411e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004122:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004126:	f023 030f 	bic.w	r3, r3, #15
 800412a:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a21      	ldr	r2, [pc, #132]	; (80041b8 <HAL_I2S_Init+0x290>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d101      	bne.n	800413a <HAL_I2S_Init+0x212>
 8004136:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <HAL_I2S_Init+0x2a0>)
 8004138:	e001      	b.n	800413e <HAL_I2S_Init+0x216>
 800413a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800413e:	2202      	movs	r2, #2
 8004140:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1c      	ldr	r2, [pc, #112]	; (80041b8 <HAL_I2S_Init+0x290>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d101      	bne.n	8004150 <HAL_I2S_Init+0x228>
 800414c:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <HAL_I2S_Init+0x2a0>)
 800414e:	e001      	b.n	8004154 <HAL_I2S_Init+0x22c>
 8004150:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004160:	d003      	beq.n	800416a <HAL_I2S_Init+0x242>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d103      	bne.n	8004172 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800416a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	e001      	b.n	8004176 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004180:	4313      	orrs	r3, r2
 8004182:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800418a:	4313      	orrs	r3, r2
 800418c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004194:	4313      	orrs	r3, r2
 8004196:	b29a      	uxth	r2, r3
 8004198:	897b      	ldrh	r3, [r7, #10]
 800419a:	4313      	orrs	r3, r2
 800419c:	b29b      	uxth	r3, r3
 800419e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041a2:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a03      	ldr	r2, [pc, #12]	; (80041b8 <HAL_I2S_Init+0x290>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10e      	bne.n	80041cc <HAL_I2S_Init+0x2a4>
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <HAL_I2S_Init+0x2a0>)
 80041b0:	e00e      	b.n	80041d0 <HAL_I2S_Init+0x2a8>
 80041b2:	bf00      	nop
 80041b4:	080042e3 	.word	0x080042e3
 80041b8:	40003800 	.word	0x40003800
 80041bc:	40003c00 	.word	0x40003c00
 80041c0:	cccccccd 	.word	0xcccccccd
 80041c4:	080043f9 	.word	0x080043f9
 80041c8:	40003400 	.word	0x40003400
 80041cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041d0:	897a      	ldrh	r2, [r7, #10]
 80041d2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3720      	adds	r7, #32
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	881a      	ldrh	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	1c9a      	adds	r2, r3, #2
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10e      	bne.n	800427c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800426c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff ffb8 	bl	80041ec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	b292      	uxth	r2, r2
 8004298:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	1c9a      	adds	r2, r3, #2
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10e      	bne.n	80042da <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff ff93 	bl	8004200 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d13a      	bne.n	8004374 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d109      	bne.n	800431c <I2S_IRQHandler+0x3a>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004312:	2b40      	cmp	r3, #64	; 0x40
 8004314:	d102      	bne.n	800431c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff ffb4 	bl	8004284 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	d126      	bne.n	8004374 <I2S_IRQHandler+0x92>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b20      	cmp	r3, #32
 8004332:	d11f      	bne.n	8004374 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004342:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004344:	2300      	movs	r3, #0
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	f043 0202 	orr.w	r2, r3, #2
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff ff50 	bl	8004214 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b03      	cmp	r3, #3
 800437e:	d136      	bne.n	80043ee <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b02      	cmp	r3, #2
 8004388:	d109      	bne.n	800439e <I2S_IRQHandler+0xbc>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004394:	2b80      	cmp	r3, #128	; 0x80
 8004396:	d102      	bne.n	800439e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff ff45 	bl	8004228 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d122      	bne.n	80043ee <I2S_IRQHandler+0x10c>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d11b      	bne.n	80043ee <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043c4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	f043 0204 	orr.w	r2, r3, #4
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff ff13 	bl	8004214 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043ee:	bf00      	nop
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a92      	ldr	r2, [pc, #584]	; (8004658 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d101      	bne.n	8004416 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004412:	4b92      	ldr	r3, [pc, #584]	; (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004414:	e001      	b.n	800441a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004416:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a8b      	ldr	r2, [pc, #556]	; (8004658 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d101      	bne.n	8004434 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004430:	4b8a      	ldr	r3, [pc, #552]	; (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004432:	e001      	b.n	8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004434:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004444:	d004      	beq.n	8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f040 8099 	bne.w	8004582 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b02      	cmp	r3, #2
 8004458:	d107      	bne.n	800446a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f925 	bl	80046b4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d107      	bne.n	8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f9c8 	bl	8004814 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b40      	cmp	r3, #64	; 0x40
 800448c:	d13a      	bne.n	8004504 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b00      	cmp	r3, #0
 8004496:	d035      	beq.n	8004504 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a6e      	ldr	r2, [pc, #440]	; (8004658 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d101      	bne.n	80044a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80044a2:	4b6e      	ldr	r3, [pc, #440]	; (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044a4:	e001      	b.n	80044aa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80044a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4969      	ldr	r1, [pc, #420]	; (8004658 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044b2:	428b      	cmp	r3, r1
 80044b4:	d101      	bne.n	80044ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80044b6:	4b69      	ldr	r3, [pc, #420]	; (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044b8:	e001      	b.n	80044be <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80044ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044c2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	f043 0202 	orr.w	r2, r3, #2
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff fe88 	bl	8004214 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b08      	cmp	r3, #8
 800450c:	f040 80c3 	bne.w	8004696 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80bd 	beq.w	8004696 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800452a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a49      	ldr	r2, [pc, #292]	; (8004658 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d101      	bne.n	800453a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004536:	4b49      	ldr	r3, [pc, #292]	; (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004538:	e001      	b.n	800453e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800453a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4944      	ldr	r1, [pc, #272]	; (8004658 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004546:	428b      	cmp	r3, r1
 8004548:	d101      	bne.n	800454e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800454a:	4b44      	ldr	r3, [pc, #272]	; (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800454c:	e001      	b.n	8004552 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800454e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004552:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004556:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004558:	2300      	movs	r3, #0
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	f043 0204 	orr.w	r2, r3, #4
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff fe4a 	bl	8004214 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004580:	e089      	b.n	8004696 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b02      	cmp	r3, #2
 800458a:	d107      	bne.n	800459c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f8be 	bl	8004718 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d107      	bne.n	80045b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f8fd 	bl	80047b0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	d12f      	bne.n	8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d02a      	beq.n	8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045d8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1e      	ldr	r2, [pc, #120]	; (8004658 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d101      	bne.n	80045e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80045e4:	4b1d      	ldr	r3, [pc, #116]	; (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045e6:	e001      	b.n	80045ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80045e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4919      	ldr	r1, [pc, #100]	; (8004658 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045f4:	428b      	cmp	r3, r1
 80045f6:	d101      	bne.n	80045fc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80045f8:	4b18      	ldr	r3, [pc, #96]	; (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045fa:	e001      	b.n	8004600 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80045fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004600:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004604:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	f043 0202 	orr.w	r2, r3, #2
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff fdfa 	bl	8004214 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b08      	cmp	r3, #8
 8004628:	d136      	bne.n	8004698 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	d031      	beq.n	8004698 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a07      	ldr	r2, [pc, #28]	; (8004658 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800463e:	4b07      	ldr	r3, [pc, #28]	; (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004640:	e001      	b.n	8004646 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004642:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4902      	ldr	r1, [pc, #8]	; (8004658 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800464e:	428b      	cmp	r3, r1
 8004650:	d106      	bne.n	8004660 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004652:	4b02      	ldr	r3, [pc, #8]	; (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004654:	e006      	b.n	8004664 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004656:	bf00      	nop
 8004658:	40003800 	.word	0x40003800
 800465c:	40003400 	.word	0x40003400
 8004660:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004664:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004668:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004678:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	f043 0204 	orr.w	r2, r3, #4
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff fdc0 	bl	8004214 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004694:	e000      	b.n	8004698 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004696:	bf00      	nop
}
 8004698:	bf00      	nop
 800469a:	3720      	adds	r7, #32
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	1c99      	adds	r1, r3, #2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6251      	str	r1, [r2, #36]	; 0x24
 80046c6:	881a      	ldrh	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d113      	bne.n	800470e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d106      	bne.n	800470e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff ffc9 	bl	80046a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	1c99      	adds	r1, r3, #2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6251      	str	r1, [r2, #36]	; 0x24
 800472a:	8819      	ldrh	r1, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <I2SEx_TxISR_I2SExt+0x90>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d101      	bne.n	800473a <I2SEx_TxISR_I2SExt+0x22>
 8004736:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <I2SEx_TxISR_I2SExt+0x94>)
 8004738:	e001      	b.n	800473e <I2SEx_TxISR_I2SExt+0x26>
 800473a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800473e:	460a      	mov	r2, r1
 8004740:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d121      	bne.n	800479e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a12      	ldr	r2, [pc, #72]	; (80047a8 <I2SEx_TxISR_I2SExt+0x90>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d101      	bne.n	8004768 <I2SEx_TxISR_I2SExt+0x50>
 8004764:	4b11      	ldr	r3, [pc, #68]	; (80047ac <I2SEx_TxISR_I2SExt+0x94>)
 8004766:	e001      	b.n	800476c <I2SEx_TxISR_I2SExt+0x54>
 8004768:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	490d      	ldr	r1, [pc, #52]	; (80047a8 <I2SEx_TxISR_I2SExt+0x90>)
 8004774:	428b      	cmp	r3, r1
 8004776:	d101      	bne.n	800477c <I2SEx_TxISR_I2SExt+0x64>
 8004778:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <I2SEx_TxISR_I2SExt+0x94>)
 800477a:	e001      	b.n	8004780 <I2SEx_TxISR_I2SExt+0x68>
 800477c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004780:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004784:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ff81 	bl	80046a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40003800 	.word	0x40003800
 80047ac:	40003400 	.word	0x40003400

080047b0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68d8      	ldr	r0, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	1c99      	adds	r1, r3, #2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80047c8:	b282      	uxth	r2, r0
 80047ca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d113      	bne.n	800480c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047f2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff ff4a 	bl	80046a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800480c:	bf00      	nop
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a20      	ldr	r2, [pc, #128]	; (80048a4 <I2SEx_RxISR_I2SExt+0x90>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d101      	bne.n	800482a <I2SEx_RxISR_I2SExt+0x16>
 8004826:	4b20      	ldr	r3, [pc, #128]	; (80048a8 <I2SEx_RxISR_I2SExt+0x94>)
 8004828:	e001      	b.n	800482e <I2SEx_RxISR_I2SExt+0x1a>
 800482a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800482e:	68d8      	ldr	r0, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	1c99      	adds	r1, r3, #2
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	62d1      	str	r1, [r2, #44]	; 0x2c
 800483a:	b282      	uxth	r2, r0
 800483c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d121      	bne.n	800489a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a12      	ldr	r2, [pc, #72]	; (80048a4 <I2SEx_RxISR_I2SExt+0x90>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d101      	bne.n	8004864 <I2SEx_RxISR_I2SExt+0x50>
 8004860:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <I2SEx_RxISR_I2SExt+0x94>)
 8004862:	e001      	b.n	8004868 <I2SEx_RxISR_I2SExt+0x54>
 8004864:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	490d      	ldr	r1, [pc, #52]	; (80048a4 <I2SEx_RxISR_I2SExt+0x90>)
 8004870:	428b      	cmp	r3, r1
 8004872:	d101      	bne.n	8004878 <I2SEx_RxISR_I2SExt+0x64>
 8004874:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <I2SEx_RxISR_I2SExt+0x94>)
 8004876:	e001      	b.n	800487c <I2SEx_RxISR_I2SExt+0x68>
 8004878:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800487c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004880:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d106      	bne.n	800489a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff ff03 	bl	80046a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40003800 	.word	0x40003800
 80048a8:	40003400 	.word	0x40003400

080048ac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80048b4:	f7fd fa18 	bl	8001ce8 <HAL_GetTick>
 80048b8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e069      	b.n	8004998 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10b      	bne.n	80048e8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7fc ff25 	bl	8001728 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80048de:	f241 3188 	movw	r1, #5000	; 0x1388
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f85e 	bl	80049a4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	021a      	lsls	r2, r3, #8
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	2120      	movs	r1, #32
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f856 	bl	80049c0 <QSPI_WaitFlagStateUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004918:	7afb      	ldrb	r3, [r7, #11]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d137      	bne.n	800498e <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004928:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6852      	ldr	r2, [r2, #4]
 8004930:	0611      	lsls	r1, r2, #24
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68d2      	ldr	r2, [r2, #12]
 8004936:	4311      	orrs	r1, r2
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	69d2      	ldr	r2, [r2, #28]
 800493c:	4311      	orrs	r1, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6a12      	ldr	r2, [r2, #32]
 8004942:	4311      	orrs	r1, r2
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	430b      	orrs	r3, r1
 800494a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	4b13      	ldr	r3, [pc, #76]	; (80049a0 <HAL_QSPI_Init+0xf4>)
 8004954:	4013      	ands	r3, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6912      	ldr	r2, [r2, #16]
 800495a:	0411      	lsls	r1, r2, #16
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6952      	ldr	r2, [r2, #20]
 8004960:	4311      	orrs	r1, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6992      	ldr	r2, [r2, #24]
 8004966:	4311      	orrs	r1, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	430b      	orrs	r3, r1
 800496e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004996:	7afb      	ldrb	r3, [r7, #11]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	ffe0f8fe 	.word	0xffe0f8fe

080049a4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	4613      	mov	r3, r2
 80049ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80049d0:	e01a      	b.n	8004a08 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d8:	d016      	beq.n	8004a08 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049da:	f7fd f985 	bl	8001ce8 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d302      	bcc.n	80049f0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10b      	bne.n	8004a08 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2204      	movs	r2, #4
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fc:	f043 0201 	orr.w	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e00e      	b.n	8004a26 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4013      	ands	r3, r2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	bf14      	ite	ne
 8004a16:	2301      	movne	r3, #1
 8004a18:	2300      	moveq	r3, #0
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d1d6      	bne.n	80049d2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0cc      	b.n	8004bde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a44:	4b68      	ldr	r3, [pc, #416]	; (8004be8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d90c      	bls.n	8004a6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a52:	4b65      	ldr	r3, [pc, #404]	; (8004be8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5a:	4b63      	ldr	r3, [pc, #396]	; (8004be8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d001      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0b8      	b.n	8004bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d020      	beq.n	8004aba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a84:	4b59      	ldr	r3, [pc, #356]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	4a58      	ldr	r2, [pc, #352]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a9c:	4b53      	ldr	r3, [pc, #332]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	4a52      	ldr	r2, [pc, #328]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa8:	4b50      	ldr	r3, [pc, #320]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	494d      	ldr	r1, [pc, #308]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d044      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d107      	bne.n	8004ade <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ace:	4b47      	ldr	r3, [pc, #284]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d119      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e07f      	b.n	8004bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d003      	beq.n	8004aee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aee:	4b3f      	ldr	r3, [pc, #252]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e06f      	b.n	8004bde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004afe:	4b3b      	ldr	r3, [pc, #236]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e067      	b.n	8004bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b0e:	4b37      	ldr	r3, [pc, #220]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f023 0203 	bic.w	r2, r3, #3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4934      	ldr	r1, [pc, #208]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b20:	f7fd f8e2 	bl	8001ce8 <HAL_GetTick>
 8004b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b28:	f7fd f8de 	bl	8001ce8 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e04f      	b.n	8004bde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3e:	4b2b      	ldr	r3, [pc, #172]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 020c 	and.w	r2, r3, #12
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d1eb      	bne.n	8004b28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b50:	4b25      	ldr	r3, [pc, #148]	; (8004be8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d20c      	bcs.n	8004b78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5e:	4b22      	ldr	r3, [pc, #136]	; (8004be8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b66:	4b20      	ldr	r3, [pc, #128]	; (8004be8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e032      	b.n	8004bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b84:	4b19      	ldr	r3, [pc, #100]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4916      	ldr	r1, [pc, #88]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d009      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ba2:	4b12      	ldr	r3, [pc, #72]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	490e      	ldr	r1, [pc, #56]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bb6:	f000 f821 	bl	8004bfc <HAL_RCC_GetSysClockFreq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	490a      	ldr	r1, [pc, #40]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc8:	5ccb      	ldrb	r3, [r1, r3]
 8004bca:	fa22 f303 	lsr.w	r3, r2, r3
 8004bce:	4a09      	ldr	r2, [pc, #36]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bd2:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fd f842 	bl	8001c60 <HAL_InitTick>

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	40023c00 	.word	0x40023c00
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	08007210 	.word	0x08007210
 8004bf4:	20000000 	.word	0x20000000
 8004bf8:	20000004 	.word	0x20000004

08004bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c00:	b090      	sub	sp, #64	; 0x40
 8004c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	637b      	str	r3, [r7, #52]	; 0x34
 8004c08:	2300      	movs	r3, #0
 8004c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c14:	4b59      	ldr	r3, [pc, #356]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 030c 	and.w	r3, r3, #12
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d00d      	beq.n	8004c3c <HAL_RCC_GetSysClockFreq+0x40>
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	f200 80a1 	bhi.w	8004d68 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <HAL_RCC_GetSysClockFreq+0x34>
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d003      	beq.n	8004c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c2e:	e09b      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c30:	4b53      	ldr	r3, [pc, #332]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c32:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004c34:	e09b      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c36:	4b53      	ldr	r3, [pc, #332]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c3a:	e098      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c3c:	4b4f      	ldr	r3, [pc, #316]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c46:	4b4d      	ldr	r3, [pc, #308]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d028      	beq.n	8004ca4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c52:	4b4a      	ldr	r3, [pc, #296]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	099b      	lsrs	r3, r3, #6
 8004c58:	2200      	movs	r2, #0
 8004c5a:	623b      	str	r3, [r7, #32]
 8004c5c:	627a      	str	r2, [r7, #36]	; 0x24
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c64:	2100      	movs	r1, #0
 8004c66:	4b47      	ldr	r3, [pc, #284]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c68:	fb03 f201 	mul.w	r2, r3, r1
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	fb00 f303 	mul.w	r3, r0, r3
 8004c72:	4413      	add	r3, r2
 8004c74:	4a43      	ldr	r2, [pc, #268]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c76:	fba0 1202 	umull	r1, r2, r0, r2
 8004c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c7c:	460a      	mov	r2, r1
 8004c7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c82:	4413      	add	r3, r2
 8004c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c88:	2200      	movs	r2, #0
 8004c8a:	61bb      	str	r3, [r7, #24]
 8004c8c:	61fa      	str	r2, [r7, #28]
 8004c8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c96:	f7fb fabf 	bl	8000218 <__aeabi_uldivmod>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca2:	e053      	b.n	8004d4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ca4:	4b35      	ldr	r3, [pc, #212]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	099b      	lsrs	r3, r3, #6
 8004caa:	2200      	movs	r2, #0
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	617a      	str	r2, [r7, #20]
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cb6:	f04f 0b00 	mov.w	fp, #0
 8004cba:	4652      	mov	r2, sl
 8004cbc:	465b      	mov	r3, fp
 8004cbe:	f04f 0000 	mov.w	r0, #0
 8004cc2:	f04f 0100 	mov.w	r1, #0
 8004cc6:	0159      	lsls	r1, r3, #5
 8004cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ccc:	0150      	lsls	r0, r2, #5
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	ebb2 080a 	subs.w	r8, r2, sl
 8004cd6:	eb63 090b 	sbc.w	r9, r3, fp
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ce6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cee:	ebb2 0408 	subs.w	r4, r2, r8
 8004cf2:	eb63 0509 	sbc.w	r5, r3, r9
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	00eb      	lsls	r3, r5, #3
 8004d00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d04:	00e2      	lsls	r2, r4, #3
 8004d06:	4614      	mov	r4, r2
 8004d08:	461d      	mov	r5, r3
 8004d0a:	eb14 030a 	adds.w	r3, r4, sl
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	eb45 030b 	adc.w	r3, r5, fp
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	f04f 0300 	mov.w	r3, #0
 8004d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d22:	4629      	mov	r1, r5
 8004d24:	028b      	lsls	r3, r1, #10
 8004d26:	4621      	mov	r1, r4
 8004d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	028a      	lsls	r2, r1, #10
 8004d30:	4610      	mov	r0, r2
 8004d32:	4619      	mov	r1, r3
 8004d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d36:	2200      	movs	r2, #0
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	60fa      	str	r2, [r7, #12]
 8004d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d40:	f7fb fa6a 	bl	8000218 <__aeabi_uldivmod>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4613      	mov	r3, r2
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	0c1b      	lsrs	r3, r3, #16
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	3301      	adds	r3, #1
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004d5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d66:	e002      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d68:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3740      	adds	r7, #64	; 0x40
 8004d74:	46bd      	mov	sp, r7
 8004d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	00f42400 	.word	0x00f42400
 8004d84:	017d7840 	.word	0x017d7840

08004d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d8c:	4b03      	ldr	r3, [pc, #12]	; (8004d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	20000000 	.word	0x20000000

08004da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004da4:	f7ff fff0 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004da8:	4602      	mov	r2, r0
 8004daa:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	0a9b      	lsrs	r3, r3, #10
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	4903      	ldr	r1, [pc, #12]	; (8004dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004db6:	5ccb      	ldrb	r3, [r1, r3]
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	08007220 	.word	0x08007220

08004dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dcc:	f7ff ffdc 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	0b5b      	lsrs	r3, r3, #13
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	4903      	ldr	r1, [pc, #12]	; (8004dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dde:	5ccb      	ldrb	r3, [r1, r3]
 8004de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40023800 	.word	0x40023800
 8004dec:	08007220 	.word	0x08007220

08004df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d010      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004e14:	4b7a      	ldr	r3, [pc, #488]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e1a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	4977      	ldr	r1, [pc, #476]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8004e32:	2301      	movs	r3, #1
 8004e34:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d010      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004e42:	4b6f      	ldr	r3, [pc, #444]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e48:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	496b      	ldr	r1, [pc, #428]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8004e60:	2301      	movs	r3, #1
 8004e62:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d022      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004e70:	4b63      	ldr	r3, [pc, #396]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7e:	4960      	ldr	r1, [pc, #384]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e9a:	d10c      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004e9c:	4b58      	ldr	r3, [pc, #352]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ea2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	021b      	lsls	r3, r3, #8
 8004eae:	4954      	ldr	r1, [pc, #336]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d022      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8004ec2:	4b4f      	ldr	r3, [pc, #316]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed0:	494b      	ldr	r1, [pc, #300]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eec:	d10c      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004eee:	4b44      	ldr	r3, [pc, #272]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ef4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	021b      	lsls	r3, r3, #8
 8004f00:	493f      	ldr	r1, [pc, #252]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 808a 	beq.w	800502a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	4b39      	ldr	r3, [pc, #228]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	4a38      	ldr	r2, [pc, #224]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f24:	6413      	str	r3, [r2, #64]	; 0x40
 8004f26:	4b36      	ldr	r3, [pc, #216]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f32:	4b34      	ldr	r3, [pc, #208]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a33      	ldr	r2, [pc, #204]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f3e:	f7fc fed3 	bl	8001ce8 <HAL_GetTick>
 8004f42:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f44:	e008      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f46:	f7fc fecf 	bl	8001ce8 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e1d1      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f58:	4b2a      	ldr	r3, [pc, #168]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f64:	4b26      	ldr	r3, [pc, #152]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f6c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d02f      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d028      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f82:	4b1f      	ldr	r3, [pc, #124]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f8a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f8c:	4b1e      	ldr	r3, [pc, #120]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004f8e:	2201      	movs	r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f92:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f98:	4a19      	ldr	r2, [pc, #100]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f9e:	4b18      	ldr	r3, [pc, #96]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d114      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004faa:	f7fc fe9d 	bl	8001ce8 <HAL_GetTick>
 8004fae:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb0:	e00a      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb2:	f7fc fe99 	bl	8001ce8 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e199      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc8:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0ee      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fe0:	d114      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004fe2:	4b07      	ldr	r3, [pc, #28]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff6:	4902      	ldr	r1, [pc, #8]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	608b      	str	r3, [r1, #8]
 8004ffc:	e00c      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004ffe:	bf00      	nop
 8005000:	40023800 	.word	0x40023800
 8005004:	40007000 	.word	0x40007000
 8005008:	42470e40 	.word	0x42470e40
 800500c:	4b89      	ldr	r3, [pc, #548]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4a88      	ldr	r2, [pc, #544]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005012:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005016:	6093      	str	r3, [r2, #8]
 8005018:	4b86      	ldr	r3, [pc, #536]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800501a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005024:	4983      	ldr	r1, [pc, #524]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005026:	4313      	orrs	r3, r2
 8005028:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800503c:	4b7e      	ldr	r3, [pc, #504]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800503e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800504c:	4b79      	ldr	r3, [pc, #484]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800504e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005052:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	4976      	ldr	r1, [pc, #472]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b00      	cmp	r3, #0
 800506c:	d011      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800506e:	4b71      	ldr	r3, [pc, #452]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005074:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507c:	496d      	ldr	r1, [pc, #436]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800508c:	d101      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 800508e:	2301      	movs	r3, #1
 8005090:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800509e:	4b65      	ldr	r3, [pc, #404]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80050a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050a4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	4961      	ldr	r1, [pc, #388]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d004      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b80      	cmp	r3, #128	; 0x80
 80050c0:	f040 80c6 	bne.w	8005250 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050c4:	4b5d      	ldr	r3, [pc, #372]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050ca:	f7fc fe0d 	bl	8001ce8 <HAL_GetTick>
 80050ce:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050d0:	e008      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050d2:	f7fc fe09 	bl	8001ce8 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e10b      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050e4:	4b53      	ldr	r3, [pc, #332]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f0      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80050f0:	4a53      	ldr	r2, [pc, #332]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f6:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d023      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d019      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005128:	2b00      	cmp	r3, #0
 800512a:	d004      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005134:	d00e      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800513e:	2b00      	cmp	r3, #0
 8005140:	d019      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	2b00      	cmp	r3, #0
 8005148:	d115      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005152:	d110      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	019b      	lsls	r3, r3, #6
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	061b      	lsls	r3, r3, #24
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	071b      	lsls	r3, r3, #28
 800516e:	4931      	ldr	r1, [pc, #196]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005186:	2b00      	cmp	r3, #0
 8005188:	d009      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005192:	2b00      	cmp	r3, #0
 8005194:	d026      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d122      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800519e:	4b25      	ldr	r3, [pc, #148]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a4:	0e1b      	lsrs	r3, r3, #24
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	019b      	lsls	r3, r3, #6
 80051b6:	431a      	orrs	r2, r3
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	061b      	lsls	r3, r3, #24
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	071b      	lsls	r3, r3, #28
 80051c4:	491b      	ldr	r1, [pc, #108]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80051cc:	4b19      	ldr	r3, [pc, #100]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d2:	f023 021f 	bic.w	r2, r3, #31
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	3b01      	subs	r3, #1
 80051dc:	4915      	ldr	r1, [pc, #84]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d010      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	019b      	lsls	r3, r3, #6
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	061b      	lsls	r3, r3, #24
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	071b      	lsls	r3, r3, #28
 800520a:	490a      	ldr	r1, [pc, #40]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005212:	4b0a      	ldr	r3, [pc, #40]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005214:	2201      	movs	r2, #1
 8005216:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005218:	f7fc fd66 	bl	8001ce8 <HAL_GetTick>
 800521c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800521e:	e011      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005220:	f7fc fd62 	bl	8001ce8 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d90a      	bls.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e064      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005232:	bf00      	nop
 8005234:	40023800 	.word	0x40023800
 8005238:	424711e0 	.word	0x424711e0
 800523c:	42470068 	.word	0x42470068
 8005240:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005244:	4b2f      	ldr	r3, [pc, #188]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0e7      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800525c:	4b29      	ldr	r3, [pc, #164]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800525e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005262:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526a:	4926      	ldr	r1, [pc, #152]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800527e:	4b21      	ldr	r3, [pc, #132]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005284:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	491d      	ldr	r1, [pc, #116]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80052a0:	4b18      	ldr	r3, [pc, #96]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80052a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ae:	4915      	ldr	r1, [pc, #84]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80052c2:	4b10      	ldr	r3, [pc, #64]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80052c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052c8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	490c      	ldr	r1, [pc, #48]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052e4:	4b07      	ldr	r3, [pc, #28]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80052e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	4904      	ldr	r1, [pc, #16]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3720      	adds	r7, #32
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40023800 	.word	0x40023800

08005308 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d004      	beq.n	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b02      	cmp	r3, #2
 800532a:	f000 80a1 	beq.w	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800532e:	e13f      	b.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8005330:	4ba3      	ldr	r3, [pc, #652]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005336:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005342:	f000 8084 	beq.w	800544e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800534c:	f200 808c 	bhi.w	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005356:	d04f      	beq.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800535e:	f200 8083 	bhi.w	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d006      	beq.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800536e:	d17b      	bne.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005370:	4b94      	ldr	r3, [pc, #592]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005372:	617b      	str	r3, [r7, #20]
          break;
 8005374:	e07b      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005376:	4b92      	ldr	r3, [pc, #584]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800537c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005384:	d109      	bne.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005386:	4b8e      	ldr	r3, [pc, #568]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800538c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005390:	4a8c      	ldr	r2, [pc, #560]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005392:	fbb2 f3f3 	udiv	r3, r2, r3
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	e019      	b.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800539a:	4b89      	ldr	r3, [pc, #548]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053a6:	d109      	bne.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80053a8:	4b85      	ldr	r3, [pc, #532]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80053aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053b2:	4a85      	ldr	r2, [pc, #532]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80053b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	e008      	b.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80053bc:	4b80      	ldr	r3, [pc, #512]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80053be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053c6:	4a81      	ldr	r2, [pc, #516]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053cc:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80053ce:	4b7c      	ldr	r3, [pc, #496]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80053d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d4:	099b      	lsrs	r3, r3, #6
 80053d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	fb02 f303 	mul.w	r3, r2, r3
 80053e0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80053e2:	4b77      	ldr	r3, [pc, #476]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80053e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053e8:	0f1b      	lsrs	r3, r3, #28
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f4:	617b      	str	r3, [r7, #20]
          break;
 80053f6:	e03a      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053f8:	4b71      	ldr	r3, [pc, #452]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005404:	d108      	bne.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005406:	4b6e      	ldr	r3, [pc, #440]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800540e:	4a6e      	ldr	r2, [pc, #440]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005410:	fbb2 f3f3 	udiv	r3, r2, r3
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	e007      	b.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005418:	4b69      	ldr	r3, [pc, #420]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005420:	4a6a      	ldr	r2, [pc, #424]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005422:	fbb2 f3f3 	udiv	r3, r2, r3
 8005426:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005428:	4b65      	ldr	r3, [pc, #404]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	099b      	lsrs	r3, r3, #6
 800542e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	fb02 f303 	mul.w	r3, r2, r3
 8005438:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800543a:	4b61      	ldr	r3, [pc, #388]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	0f1b      	lsrs	r3, r3, #28
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	fbb2 f3f3 	udiv	r3, r2, r3
 800544a:	617b      	str	r3, [r7, #20]
          break;
 800544c:	e00f      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800544e:	4b5c      	ldr	r3, [pc, #368]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800545a:	d102      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 800545c:	4b5a      	ldr	r3, [pc, #360]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800545e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005460:	e005      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 8005462:	4b5a      	ldr	r3, [pc, #360]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005464:	617b      	str	r3, [r7, #20]
          break;
 8005466:	e002      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]
          break;
 800546c:	bf00      	nop
        }
      }
      break;
 800546e:	e09f      	b.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005470:	4b53      	ldr	r3, [pc, #332]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005476:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005482:	f000 8084 	beq.w	800558e <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800548c:	f200 808c 	bhi.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005496:	d04f      	beq.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800549e:	f200 8083 	bhi.w	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d006      	beq.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ae:	d17b      	bne.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80054b0:	4b44      	ldr	r3, [pc, #272]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80054b2:	617b      	str	r3, [r7, #20]
          break;
 80054b4:	e07b      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80054b6:	4b42      	ldr	r3, [pc, #264]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80054b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054c4:	d109      	bne.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80054c6:	4b3e      	ldr	r3, [pc, #248]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80054c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d0:	4a3c      	ldr	r2, [pc, #240]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80054d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	e019      	b.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80054da:	4b39      	ldr	r3, [pc, #228]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054e6:	d109      	bne.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80054e8:	4b35      	ldr	r3, [pc, #212]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80054ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054f2:	4a35      	ldr	r2, [pc, #212]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80054f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	e008      	b.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80054fc:	4b30      	ldr	r3, [pc, #192]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80054fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005506:	4a31      	ldr	r2, [pc, #196]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005508:	fbb2 f3f3 	udiv	r3, r2, r3
 800550c:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800550e:	4b2c      	ldr	r3, [pc, #176]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005514:	099b      	lsrs	r3, r3, #6
 8005516:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	fb02 f303 	mul.w	r3, r2, r3
 8005520:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005522:	4b27      	ldr	r3, [pc, #156]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005528:	0f1b      	lsrs	r3, r3, #28
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	fbb2 f3f3 	udiv	r3, r2, r3
 8005534:	617b      	str	r3, [r7, #20]
          break;
 8005536:	e03a      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005538:	4b21      	ldr	r3, [pc, #132]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005544:	d108      	bne.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005546:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800554e:	4a1e      	ldr	r2, [pc, #120]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005550:	fbb2 f3f3 	udiv	r3, r2, r3
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	e007      	b.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005558:	4b19      	ldr	r3, [pc, #100]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005560:	4a1a      	ldr	r2, [pc, #104]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005568:	4b15      	ldr	r3, [pc, #84]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	099b      	lsrs	r3, r3, #6
 800556e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	fb02 f303 	mul.w	r3, r2, r3
 8005578:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800557a:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	0f1b      	lsrs	r3, r3, #28
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	fbb2 f3f3 	udiv	r3, r2, r3
 800558a:	617b      	str	r3, [r7, #20]
          break;
 800558c:	e00f      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800558e:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800559a:	d102      	bne.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 800559c:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800559e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80055a0:	e005      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 80055a2:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055a4:	617b      	str	r3, [r7, #20]
          break;
 80055a6:	e002      	b.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
          break;
 80055ac:	bf00      	nop
        }
      }
      break;
 80055ae:	bf00      	nop
    }
  }
  return frequency;
 80055b0:	697b      	ldr	r3, [r7, #20]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	371c      	adds	r7, #28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40023800 	.word	0x40023800
 80055c4:	00bb8000 	.word	0x00bb8000
 80055c8:	017d7840 	.word	0x017d7840
 80055cc:	00f42400 	.word	0x00f42400

080055d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e273      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d075      	beq.n	80056da <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80055ee:	4b88      	ldr	r3, [pc, #544]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 030c 	and.w	r3, r3, #12
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d00c      	beq.n	8005614 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055fa:	4b85      	ldr	r3, [pc, #532]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005602:	2b08      	cmp	r3, #8
 8005604:	d112      	bne.n	800562c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005606:	4b82      	ldr	r3, [pc, #520]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800560e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005612:	d10b      	bne.n	800562c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005614:	4b7e      	ldr	r3, [pc, #504]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d05b      	beq.n	80056d8 <HAL_RCC_OscConfig+0x108>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d157      	bne.n	80056d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e24e      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005634:	d106      	bne.n	8005644 <HAL_RCC_OscConfig+0x74>
 8005636:	4b76      	ldr	r3, [pc, #472]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a75      	ldr	r2, [pc, #468]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 800563c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e01d      	b.n	8005680 <HAL_RCC_OscConfig+0xb0>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800564c:	d10c      	bne.n	8005668 <HAL_RCC_OscConfig+0x98>
 800564e:	4b70      	ldr	r3, [pc, #448]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a6f      	ldr	r2, [pc, #444]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	4b6d      	ldr	r3, [pc, #436]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a6c      	ldr	r2, [pc, #432]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	e00b      	b.n	8005680 <HAL_RCC_OscConfig+0xb0>
 8005668:	4b69      	ldr	r3, [pc, #420]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a68      	ldr	r2, [pc, #416]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 800566e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	4b66      	ldr	r3, [pc, #408]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a65      	ldr	r2, [pc, #404]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 800567a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800567e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d013      	beq.n	80056b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fc fb2e 	bl	8001ce8 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005690:	f7fc fb2a 	bl	8001ce8 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b64      	cmp	r3, #100	; 0x64
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e213      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a2:	4b5b      	ldr	r3, [pc, #364]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0f0      	beq.n	8005690 <HAL_RCC_OscConfig+0xc0>
 80056ae:	e014      	b.n	80056da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b0:	f7fc fb1a 	bl	8001ce8 <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056b8:	f7fc fb16 	bl	8001ce8 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b64      	cmp	r3, #100	; 0x64
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e1ff      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ca:	4b51      	ldr	r3, [pc, #324]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0xe8>
 80056d6:	e000      	b.n	80056da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d063      	beq.n	80057ae <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056e6:	4b4a      	ldr	r3, [pc, #296]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 030c 	and.w	r3, r3, #12
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00b      	beq.n	800570a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056f2:	4b47      	ldr	r3, [pc, #284]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d11c      	bne.n	8005738 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056fe:	4b44      	ldr	r3, [pc, #272]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d116      	bne.n	8005738 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800570a:	4b41      	ldr	r3, [pc, #260]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_RCC_OscConfig+0x152>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d001      	beq.n	8005722 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e1d3      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005722:	4b3b      	ldr	r3, [pc, #236]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	4937      	ldr	r1, [pc, #220]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005732:	4313      	orrs	r3, r2
 8005734:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005736:	e03a      	b.n	80057ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d020      	beq.n	8005782 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005740:	4b34      	ldr	r3, [pc, #208]	; (8005814 <HAL_RCC_OscConfig+0x244>)
 8005742:	2201      	movs	r2, #1
 8005744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005746:	f7fc facf 	bl	8001ce8 <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800574c:	e008      	b.n	8005760 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800574e:	f7fc facb 	bl	8001ce8 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e1b4      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005760:	4b2b      	ldr	r3, [pc, #172]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0f0      	beq.n	800574e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800576c:	4b28      	ldr	r3, [pc, #160]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	4925      	ldr	r1, [pc, #148]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 800577c:	4313      	orrs	r3, r2
 800577e:	600b      	str	r3, [r1, #0]
 8005780:	e015      	b.n	80057ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005782:	4b24      	ldr	r3, [pc, #144]	; (8005814 <HAL_RCC_OscConfig+0x244>)
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005788:	f7fc faae 	bl	8001ce8 <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005790:	f7fc faaa 	bl	8001ce8 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e193      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057a2:	4b1b      	ldr	r3, [pc, #108]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f0      	bne.n	8005790 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d036      	beq.n	8005828 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d016      	beq.n	80057f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057c2:	4b15      	ldr	r3, [pc, #84]	; (8005818 <HAL_RCC_OscConfig+0x248>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c8:	f7fc fa8e 	bl	8001ce8 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057d0:	f7fc fa8a 	bl	8001ce8 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e173      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057e2:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 80057e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0f0      	beq.n	80057d0 <HAL_RCC_OscConfig+0x200>
 80057ee:	e01b      	b.n	8005828 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057f0:	4b09      	ldr	r3, [pc, #36]	; (8005818 <HAL_RCC_OscConfig+0x248>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f6:	f7fc fa77 	bl	8001ce8 <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057fc:	e00e      	b.n	800581c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057fe:	f7fc fa73 	bl	8001ce8 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d907      	bls.n	800581c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e15c      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
 8005810:	40023800 	.word	0x40023800
 8005814:	42470000 	.word	0x42470000
 8005818:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800581c:	4b8a      	ldr	r3, [pc, #552]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 800581e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1ea      	bne.n	80057fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 8097 	beq.w	8005964 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005836:	2300      	movs	r3, #0
 8005838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800583a:	4b83      	ldr	r3, [pc, #524]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10f      	bne.n	8005866 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005846:	2300      	movs	r3, #0
 8005848:	60bb      	str	r3, [r7, #8]
 800584a:	4b7f      	ldr	r3, [pc, #508]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	4a7e      	ldr	r2, [pc, #504]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 8005850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005854:	6413      	str	r3, [r2, #64]	; 0x40
 8005856:	4b7c      	ldr	r3, [pc, #496]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585e:	60bb      	str	r3, [r7, #8]
 8005860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005862:	2301      	movs	r3, #1
 8005864:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005866:	4b79      	ldr	r3, [pc, #484]	; (8005a4c <HAL_RCC_OscConfig+0x47c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586e:	2b00      	cmp	r3, #0
 8005870:	d118      	bne.n	80058a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005872:	4b76      	ldr	r3, [pc, #472]	; (8005a4c <HAL_RCC_OscConfig+0x47c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a75      	ldr	r2, [pc, #468]	; (8005a4c <HAL_RCC_OscConfig+0x47c>)
 8005878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800587c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800587e:	f7fc fa33 	bl	8001ce8 <HAL_GetTick>
 8005882:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005884:	e008      	b.n	8005898 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005886:	f7fc fa2f 	bl	8001ce8 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e118      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005898:	4b6c      	ldr	r3, [pc, #432]	; (8005a4c <HAL_RCC_OscConfig+0x47c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0f0      	beq.n	8005886 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d106      	bne.n	80058ba <HAL_RCC_OscConfig+0x2ea>
 80058ac:	4b66      	ldr	r3, [pc, #408]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 80058ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b0:	4a65      	ldr	r2, [pc, #404]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 80058b2:	f043 0301 	orr.w	r3, r3, #1
 80058b6:	6713      	str	r3, [r2, #112]	; 0x70
 80058b8:	e01c      	b.n	80058f4 <HAL_RCC_OscConfig+0x324>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2b05      	cmp	r3, #5
 80058c0:	d10c      	bne.n	80058dc <HAL_RCC_OscConfig+0x30c>
 80058c2:	4b61      	ldr	r3, [pc, #388]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 80058c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c6:	4a60      	ldr	r2, [pc, #384]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 80058c8:	f043 0304 	orr.w	r3, r3, #4
 80058cc:	6713      	str	r3, [r2, #112]	; 0x70
 80058ce:	4b5e      	ldr	r3, [pc, #376]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 80058d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d2:	4a5d      	ldr	r2, [pc, #372]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 80058d4:	f043 0301 	orr.w	r3, r3, #1
 80058d8:	6713      	str	r3, [r2, #112]	; 0x70
 80058da:	e00b      	b.n	80058f4 <HAL_RCC_OscConfig+0x324>
 80058dc:	4b5a      	ldr	r3, [pc, #360]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 80058de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e0:	4a59      	ldr	r2, [pc, #356]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 80058e2:	f023 0301 	bic.w	r3, r3, #1
 80058e6:	6713      	str	r3, [r2, #112]	; 0x70
 80058e8:	4b57      	ldr	r3, [pc, #348]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 80058ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ec:	4a56      	ldr	r2, [pc, #344]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 80058ee:	f023 0304 	bic.w	r3, r3, #4
 80058f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d015      	beq.n	8005928 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fc:	f7fc f9f4 	bl	8001ce8 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005902:	e00a      	b.n	800591a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005904:	f7fc f9f0 	bl	8001ce8 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e0d7      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591a:	4b4b      	ldr	r3, [pc, #300]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0ee      	beq.n	8005904 <HAL_RCC_OscConfig+0x334>
 8005926:	e014      	b.n	8005952 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005928:	f7fc f9de 	bl	8001ce8 <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800592e:	e00a      	b.n	8005946 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005930:	f7fc f9da 	bl	8001ce8 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	f241 3288 	movw	r2, #5000	; 0x1388
 800593e:	4293      	cmp	r3, r2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e0c1      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005946:	4b40      	ldr	r3, [pc, #256]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 8005948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1ee      	bne.n	8005930 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005952:	7dfb      	ldrb	r3, [r7, #23]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d105      	bne.n	8005964 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005958:	4b3b      	ldr	r3, [pc, #236]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	4a3a      	ldr	r2, [pc, #232]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 800595e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005962:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80ad 	beq.w	8005ac8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800596e:	4b36      	ldr	r3, [pc, #216]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 030c 	and.w	r3, r3, #12
 8005976:	2b08      	cmp	r3, #8
 8005978:	d060      	beq.n	8005a3c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d145      	bne.n	8005a0e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005982:	4b33      	ldr	r3, [pc, #204]	; (8005a50 <HAL_RCC_OscConfig+0x480>)
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005988:	f7fc f9ae 	bl	8001ce8 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005990:	f7fc f9aa 	bl	8001ce8 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e093      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059a2:	4b29      	ldr	r3, [pc, #164]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1f0      	bne.n	8005990 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69da      	ldr	r2, [r3, #28]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	019b      	lsls	r3, r3, #6
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	3b01      	subs	r3, #1
 80059c8:	041b      	lsls	r3, r3, #16
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	061b      	lsls	r3, r3, #24
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	071b      	lsls	r3, r3, #28
 80059da:	491b      	ldr	r1, [pc, #108]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059e0:	4b1b      	ldr	r3, [pc, #108]	; (8005a50 <HAL_RCC_OscConfig+0x480>)
 80059e2:	2201      	movs	r2, #1
 80059e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e6:	f7fc f97f 	bl	8001ce8 <HAL_GetTick>
 80059ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ec:	e008      	b.n	8005a00 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ee:	f7fc f97b 	bl	8001ce8 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e064      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a00:	4b11      	ldr	r3, [pc, #68]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0f0      	beq.n	80059ee <HAL_RCC_OscConfig+0x41e>
 8005a0c:	e05c      	b.n	8005ac8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a0e:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <HAL_RCC_OscConfig+0x480>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a14:	f7fc f968 	bl	8001ce8 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a1c:	f7fc f964 	bl	8001ce8 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e04d      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a2e:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f0      	bne.n	8005a1c <HAL_RCC_OscConfig+0x44c>
 8005a3a:	e045      	b.n	8005ac8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d107      	bne.n	8005a54 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e040      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	40007000 	.word	0x40007000
 8005a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a54:	4b1f      	ldr	r3, [pc, #124]	; (8005ad4 <HAL_RCC_OscConfig+0x504>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d030      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d129      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d122      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a84:	4013      	ands	r3, r2
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d119      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	085b      	lsrs	r3, r3, #1
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d10f      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d107      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e000      	b.n	8005aca <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800

08005ad8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e038      	b.n	8005b60 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f7fc f806 	bl	8001b14 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3308      	adds	r3, #8
 8005b10:	4619      	mov	r1, r3
 8005b12:	4610      	mov	r0, r2
 8005b14:	f000 fe1a 	bl	800674c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6818      	ldr	r0, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	461a      	mov	r2, r3
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	f000 fea2 	bl	800686c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6858      	ldr	r0, [r3, #4]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	f000 fee9 	bl	800690c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	6892      	ldr	r2, [r2, #8]
 8005b42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	6892      	ldr	r2, [r2, #8]
 8005b4e:	f041 0101 	orr.w	r1, r1, #1
 8005b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e041      	b.n	8005bfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fb fe94 	bl	80018bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	f000 f9ce 	bl	8005f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d001      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e04e      	b.n	8005cbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a23      	ldr	r2, [pc, #140]	; (8005ccc <HAL_TIM_Base_Start_IT+0xc4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d022      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4a:	d01d      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d018      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a1e      	ldr	r2, [pc, #120]	; (8005cd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d013      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a1c      	ldr	r2, [pc, #112]	; (8005cd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00e      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a1b      	ldr	r2, [pc, #108]	; (8005cdc <HAL_TIM_Base_Start_IT+0xd4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d009      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a19      	ldr	r2, [pc, #100]	; (8005ce0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d004      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x80>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a18      	ldr	r2, [pc, #96]	; (8005ce4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d111      	bne.n	8005cac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 0307 	and.w	r3, r3, #7
 8005c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b06      	cmp	r3, #6
 8005c98:	d010      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0201 	orr.w	r2, r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005caa:	e007      	b.n	8005cbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40010000 	.word	0x40010000
 8005cd0:	40000400 	.word	0x40000400
 8005cd4:	40000800 	.word	0x40000800
 8005cd8:	40000c00 	.word	0x40000c00
 8005cdc:	40010400 	.word	0x40010400
 8005ce0:	40014000 	.word	0x40014000
 8005ce4:	40001800 	.word	0x40001800

08005ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d122      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d11b      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0202 	mvn.w	r2, #2
 8005d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f8ee 	bl	8005f0c <HAL_TIM_IC_CaptureCallback>
 8005d30:	e005      	b.n	8005d3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f8e0 	bl	8005ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f8f1 	bl	8005f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d122      	bne.n	8005d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d11b      	bne.n	8005d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0204 	mvn.w	r2, #4
 8005d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f8c4 	bl	8005f0c <HAL_TIM_IC_CaptureCallback>
 8005d84:	e005      	b.n	8005d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f8b6 	bl	8005ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f8c7 	bl	8005f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d122      	bne.n	8005dec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d11b      	bne.n	8005dec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0208 	mvn.w	r2, #8
 8005dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2204      	movs	r2, #4
 8005dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f89a 	bl	8005f0c <HAL_TIM_IC_CaptureCallback>
 8005dd8:	e005      	b.n	8005de6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f88c 	bl	8005ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f89d 	bl	8005f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	2b10      	cmp	r3, #16
 8005df8:	d122      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b10      	cmp	r3, #16
 8005e06:	d11b      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0210 	mvn.w	r2, #16
 8005e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2208      	movs	r2, #8
 8005e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f870 	bl	8005f0c <HAL_TIM_IC_CaptureCallback>
 8005e2c:	e005      	b.n	8005e3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f862 	bl	8005ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f873 	bl	8005f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d10e      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d107      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f06f 0201 	mvn.w	r2, #1
 8005e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fb f8ce 	bl	8001008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e76:	2b80      	cmp	r3, #128	; 0x80
 8005e78:	d10e      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e84:	2b80      	cmp	r3, #128	; 0x80
 8005e86:	d107      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f97e 	bl	8006194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b40      	cmp	r3, #64	; 0x40
 8005ea4:	d10e      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb0:	2b40      	cmp	r3, #64	; 0x40
 8005eb2:	d107      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f838 	bl	8005f34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0320 	and.w	r3, r3, #32
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	d107      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0220 	mvn.w	r2, #32
 8005ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f948 	bl	8006180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ef0:	bf00      	nop
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a40      	ldr	r2, [pc, #256]	; (800605c <TIM_Base_SetConfig+0x114>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d013      	beq.n	8005f88 <TIM_Base_SetConfig+0x40>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f66:	d00f      	beq.n	8005f88 <TIM_Base_SetConfig+0x40>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a3d      	ldr	r2, [pc, #244]	; (8006060 <TIM_Base_SetConfig+0x118>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00b      	beq.n	8005f88 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a3c      	ldr	r2, [pc, #240]	; (8006064 <TIM_Base_SetConfig+0x11c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d007      	beq.n	8005f88 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a3b      	ldr	r2, [pc, #236]	; (8006068 <TIM_Base_SetConfig+0x120>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d003      	beq.n	8005f88 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a3a      	ldr	r2, [pc, #232]	; (800606c <TIM_Base_SetConfig+0x124>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d108      	bne.n	8005f9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a2f      	ldr	r2, [pc, #188]	; (800605c <TIM_Base_SetConfig+0x114>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d02b      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa8:	d027      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2c      	ldr	r2, [pc, #176]	; (8006060 <TIM_Base_SetConfig+0x118>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d023      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a2b      	ldr	r2, [pc, #172]	; (8006064 <TIM_Base_SetConfig+0x11c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d01f      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a2a      	ldr	r2, [pc, #168]	; (8006068 <TIM_Base_SetConfig+0x120>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d01b      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a29      	ldr	r2, [pc, #164]	; (800606c <TIM_Base_SetConfig+0x124>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d017      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a28      	ldr	r2, [pc, #160]	; (8006070 <TIM_Base_SetConfig+0x128>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d013      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a27      	ldr	r2, [pc, #156]	; (8006074 <TIM_Base_SetConfig+0x12c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00f      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a26      	ldr	r2, [pc, #152]	; (8006078 <TIM_Base_SetConfig+0x130>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00b      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a25      	ldr	r2, [pc, #148]	; (800607c <TIM_Base_SetConfig+0x134>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d007      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a24      	ldr	r2, [pc, #144]	; (8006080 <TIM_Base_SetConfig+0x138>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d003      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a23      	ldr	r2, [pc, #140]	; (8006084 <TIM_Base_SetConfig+0x13c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d108      	bne.n	800600c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4313      	orrs	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a0a      	ldr	r2, [pc, #40]	; (800605c <TIM_Base_SetConfig+0x114>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d003      	beq.n	8006040 <TIM_Base_SetConfig+0xf8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a0c      	ldr	r2, [pc, #48]	; (800606c <TIM_Base_SetConfig+0x124>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d103      	bne.n	8006048 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	615a      	str	r2, [r3, #20]
}
 800604e:	bf00      	nop
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	40010000 	.word	0x40010000
 8006060:	40000400 	.word	0x40000400
 8006064:	40000800 	.word	0x40000800
 8006068:	40000c00 	.word	0x40000c00
 800606c:	40010400 	.word	0x40010400
 8006070:	40014000 	.word	0x40014000
 8006074:	40014400 	.word	0x40014400
 8006078:	40014800 	.word	0x40014800
 800607c:	40001800 	.word	0x40001800
 8006080:	40001c00 	.word	0x40001c00
 8006084:	40002000 	.word	0x40002000

08006088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800609c:	2302      	movs	r3, #2
 800609e:	e05a      	b.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a21      	ldr	r2, [pc, #132]	; (8006164 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d022      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ec:	d01d      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a1d      	ldr	r2, [pc, #116]	; (8006168 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d018      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a1b      	ldr	r2, [pc, #108]	; (800616c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d013      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a1a      	ldr	r2, [pc, #104]	; (8006170 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00e      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a18      	ldr	r2, [pc, #96]	; (8006174 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d009      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a17      	ldr	r2, [pc, #92]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d004      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a15      	ldr	r2, [pc, #84]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d10c      	bne.n	8006144 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006130:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	4313      	orrs	r3, r2
 800613a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	40010000 	.word	0x40010000
 8006168:	40000400 	.word	0x40000400
 800616c:	40000800 	.word	0x40000800
 8006170:	40000c00 	.word	0x40000c00
 8006174:	40010400 	.word	0x40010400
 8006178:	40014000 	.word	0x40014000
 800617c:	40001800 	.word	0x40001800

08006180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e03f      	b.n	800623a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7fb fbb2 	bl	8001938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2224      	movs	r2, #36	; 0x24
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f829 	bl	8006244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	691a      	ldr	r2, [r3, #16]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006200:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	695a      	ldr	r2, [r3, #20]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006210:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006220:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006248:	b0c0      	sub	sp, #256	; 0x100
 800624a:	af00      	add	r7, sp, #0
 800624c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006260:	68d9      	ldr	r1, [r3, #12]
 8006262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	ea40 0301 	orr.w	r3, r0, r1
 800626c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800626e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	431a      	orrs	r2, r3
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	431a      	orrs	r2, r3
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	4313      	orrs	r3, r2
 800628c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800629c:	f021 010c 	bic.w	r1, r1, #12
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062aa:	430b      	orrs	r3, r1
 80062ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062be:	6999      	ldr	r1, [r3, #24]
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	ea40 0301 	orr.w	r3, r0, r1
 80062ca:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80062cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4b95      	ldr	r3, [pc, #596]	; (8006528 <UART_SetConfig+0x2e4>)
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d011      	beq.n	80062fc <UART_SetConfig+0xb8>
 80062d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	4b93      	ldr	r3, [pc, #588]	; (800652c <UART_SetConfig+0x2e8>)
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d00b      	beq.n	80062fc <UART_SetConfig+0xb8>
 80062e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	4b91      	ldr	r3, [pc, #580]	; (8006530 <UART_SetConfig+0x2ec>)
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d005      	beq.n	80062fc <UART_SetConfig+0xb8>
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	4b8f      	ldr	r3, [pc, #572]	; (8006534 <UART_SetConfig+0x2f0>)
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d104      	bne.n	8006306 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062fc:	f7fe fd64 	bl	8004dc8 <HAL_RCC_GetPCLK2Freq>
 8006300:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006304:	e003      	b.n	800630e <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006306:	f7fe fd4b 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 800630a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800630e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006318:	f040 8110 	bne.w	800653c <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800631c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006320:	2200      	movs	r2, #0
 8006322:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006326:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800632a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800632e:	4622      	mov	r2, r4
 8006330:	462b      	mov	r3, r5
 8006332:	1891      	adds	r1, r2, r2
 8006334:	65b9      	str	r1, [r7, #88]	; 0x58
 8006336:	415b      	adcs	r3, r3
 8006338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800633a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800633e:	4621      	mov	r1, r4
 8006340:	eb12 0801 	adds.w	r8, r2, r1
 8006344:	4629      	mov	r1, r5
 8006346:	eb43 0901 	adc.w	r9, r3, r1
 800634a:	f04f 0200 	mov.w	r2, #0
 800634e:	f04f 0300 	mov.w	r3, #0
 8006352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800635a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800635e:	4690      	mov	r8, r2
 8006360:	4699      	mov	r9, r3
 8006362:	4623      	mov	r3, r4
 8006364:	eb18 0303 	adds.w	r3, r8, r3
 8006368:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800636c:	462b      	mov	r3, r5
 800636e:	eb49 0303 	adc.w	r3, r9, r3
 8006372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006382:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006386:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800638a:	460b      	mov	r3, r1
 800638c:	18db      	adds	r3, r3, r3
 800638e:	653b      	str	r3, [r7, #80]	; 0x50
 8006390:	4613      	mov	r3, r2
 8006392:	eb42 0303 	adc.w	r3, r2, r3
 8006396:	657b      	str	r3, [r7, #84]	; 0x54
 8006398:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800639c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063a0:	f7f9 ff3a 	bl	8000218 <__aeabi_uldivmod>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4b63      	ldr	r3, [pc, #396]	; (8006538 <UART_SetConfig+0x2f4>)
 80063aa:	fba3 2302 	umull	r2, r3, r3, r2
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	011c      	lsls	r4, r3, #4
 80063b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063c4:	4642      	mov	r2, r8
 80063c6:	464b      	mov	r3, r9
 80063c8:	1891      	adds	r1, r2, r2
 80063ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80063cc:	415b      	adcs	r3, r3
 80063ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063d4:	4641      	mov	r1, r8
 80063d6:	eb12 0a01 	adds.w	sl, r2, r1
 80063da:	4649      	mov	r1, r9
 80063dc:	eb43 0b01 	adc.w	fp, r3, r1
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063f4:	4692      	mov	sl, r2
 80063f6:	469b      	mov	fp, r3
 80063f8:	4643      	mov	r3, r8
 80063fa:	eb1a 0303 	adds.w	r3, sl, r3
 80063fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006402:	464b      	mov	r3, r9
 8006404:	eb4b 0303 	adc.w	r3, fp, r3
 8006408:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006418:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800641c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006420:	460b      	mov	r3, r1
 8006422:	18db      	adds	r3, r3, r3
 8006424:	643b      	str	r3, [r7, #64]	; 0x40
 8006426:	4613      	mov	r3, r2
 8006428:	eb42 0303 	adc.w	r3, r2, r3
 800642c:	647b      	str	r3, [r7, #68]	; 0x44
 800642e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006432:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006436:	f7f9 feef 	bl	8000218 <__aeabi_uldivmod>
 800643a:	4602      	mov	r2, r0
 800643c:	460b      	mov	r3, r1
 800643e:	4611      	mov	r1, r2
 8006440:	4b3d      	ldr	r3, [pc, #244]	; (8006538 <UART_SetConfig+0x2f4>)
 8006442:	fba3 2301 	umull	r2, r3, r3, r1
 8006446:	095b      	lsrs	r3, r3, #5
 8006448:	2264      	movs	r2, #100	; 0x64
 800644a:	fb02 f303 	mul.w	r3, r2, r3
 800644e:	1acb      	subs	r3, r1, r3
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006456:	4b38      	ldr	r3, [pc, #224]	; (8006538 <UART_SetConfig+0x2f4>)
 8006458:	fba3 2302 	umull	r2, r3, r3, r2
 800645c:	095b      	lsrs	r3, r3, #5
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006464:	441c      	add	r4, r3
 8006466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800646a:	2200      	movs	r2, #0
 800646c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006470:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006474:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006478:	4642      	mov	r2, r8
 800647a:	464b      	mov	r3, r9
 800647c:	1891      	adds	r1, r2, r2
 800647e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006480:	415b      	adcs	r3, r3
 8006482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006484:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006488:	4641      	mov	r1, r8
 800648a:	1851      	adds	r1, r2, r1
 800648c:	6339      	str	r1, [r7, #48]	; 0x30
 800648e:	4649      	mov	r1, r9
 8006490:	414b      	adcs	r3, r1
 8006492:	637b      	str	r3, [r7, #52]	; 0x34
 8006494:	f04f 0200 	mov.w	r2, #0
 8006498:	f04f 0300 	mov.w	r3, #0
 800649c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064a0:	4659      	mov	r1, fp
 80064a2:	00cb      	lsls	r3, r1, #3
 80064a4:	4651      	mov	r1, sl
 80064a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064aa:	4651      	mov	r1, sl
 80064ac:	00ca      	lsls	r2, r1, #3
 80064ae:	4610      	mov	r0, r2
 80064b0:	4619      	mov	r1, r3
 80064b2:	4603      	mov	r3, r0
 80064b4:	4642      	mov	r2, r8
 80064b6:	189b      	adds	r3, r3, r2
 80064b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064bc:	464b      	mov	r3, r9
 80064be:	460a      	mov	r2, r1
 80064c0:	eb42 0303 	adc.w	r3, r2, r3
 80064c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064dc:	460b      	mov	r3, r1
 80064de:	18db      	adds	r3, r3, r3
 80064e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e2:	4613      	mov	r3, r2
 80064e4:	eb42 0303 	adc.w	r3, r2, r3
 80064e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064f2:	f7f9 fe91 	bl	8000218 <__aeabi_uldivmod>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4b0f      	ldr	r3, [pc, #60]	; (8006538 <UART_SetConfig+0x2f4>)
 80064fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006500:	095b      	lsrs	r3, r3, #5
 8006502:	2164      	movs	r1, #100	; 0x64
 8006504:	fb01 f303 	mul.w	r3, r1, r3
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	3332      	adds	r3, #50	; 0x32
 800650e:	4a0a      	ldr	r2, [pc, #40]	; (8006538 <UART_SetConfig+0x2f4>)
 8006510:	fba2 2303 	umull	r2, r3, r2, r3
 8006514:	095b      	lsrs	r3, r3, #5
 8006516:	f003 0207 	and.w	r2, r3, #7
 800651a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4422      	add	r2, r4
 8006522:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006524:	e109      	b.n	800673a <UART_SetConfig+0x4f6>
 8006526:	bf00      	nop
 8006528:	40011000 	.word	0x40011000
 800652c:	40011400 	.word	0x40011400
 8006530:	40011800 	.word	0x40011800
 8006534:	40011c00 	.word	0x40011c00
 8006538:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800653c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006540:	2200      	movs	r2, #0
 8006542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006546:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800654a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800654e:	4642      	mov	r2, r8
 8006550:	464b      	mov	r3, r9
 8006552:	1891      	adds	r1, r2, r2
 8006554:	6239      	str	r1, [r7, #32]
 8006556:	415b      	adcs	r3, r3
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
 800655a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800655e:	4641      	mov	r1, r8
 8006560:	1854      	adds	r4, r2, r1
 8006562:	4649      	mov	r1, r9
 8006564:	eb43 0501 	adc.w	r5, r3, r1
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	f04f 0300 	mov.w	r3, #0
 8006570:	00eb      	lsls	r3, r5, #3
 8006572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006576:	00e2      	lsls	r2, r4, #3
 8006578:	4614      	mov	r4, r2
 800657a:	461d      	mov	r5, r3
 800657c:	4643      	mov	r3, r8
 800657e:	18e3      	adds	r3, r4, r3
 8006580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006584:	464b      	mov	r3, r9
 8006586:	eb45 0303 	adc.w	r3, r5, r3
 800658a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800658e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800659a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	f04f 0300 	mov.w	r3, #0
 80065a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065aa:	4629      	mov	r1, r5
 80065ac:	008b      	lsls	r3, r1, #2
 80065ae:	4621      	mov	r1, r4
 80065b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065b4:	4621      	mov	r1, r4
 80065b6:	008a      	lsls	r2, r1, #2
 80065b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065bc:	f7f9 fe2c 	bl	8000218 <__aeabi_uldivmod>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4b60      	ldr	r3, [pc, #384]	; (8006748 <UART_SetConfig+0x504>)
 80065c6:	fba3 2302 	umull	r2, r3, r3, r2
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	011c      	lsls	r4, r3, #4
 80065ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065e0:	4642      	mov	r2, r8
 80065e2:	464b      	mov	r3, r9
 80065e4:	1891      	adds	r1, r2, r2
 80065e6:	61b9      	str	r1, [r7, #24]
 80065e8:	415b      	adcs	r3, r3
 80065ea:	61fb      	str	r3, [r7, #28]
 80065ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065f0:	4641      	mov	r1, r8
 80065f2:	1851      	adds	r1, r2, r1
 80065f4:	6139      	str	r1, [r7, #16]
 80065f6:	4649      	mov	r1, r9
 80065f8:	414b      	adcs	r3, r1
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	f04f 0200 	mov.w	r2, #0
 8006600:	f04f 0300 	mov.w	r3, #0
 8006604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006608:	4659      	mov	r1, fp
 800660a:	00cb      	lsls	r3, r1, #3
 800660c:	4651      	mov	r1, sl
 800660e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006612:	4651      	mov	r1, sl
 8006614:	00ca      	lsls	r2, r1, #3
 8006616:	4610      	mov	r0, r2
 8006618:	4619      	mov	r1, r3
 800661a:	4603      	mov	r3, r0
 800661c:	4642      	mov	r2, r8
 800661e:	189b      	adds	r3, r3, r2
 8006620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006624:	464b      	mov	r3, r9
 8006626:	460a      	mov	r2, r1
 8006628:	eb42 0303 	adc.w	r3, r2, r3
 800662c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	67bb      	str	r3, [r7, #120]	; 0x78
 800663a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006648:	4649      	mov	r1, r9
 800664a:	008b      	lsls	r3, r1, #2
 800664c:	4641      	mov	r1, r8
 800664e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006652:	4641      	mov	r1, r8
 8006654:	008a      	lsls	r2, r1, #2
 8006656:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800665a:	f7f9 fddd 	bl	8000218 <__aeabi_uldivmod>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	4b39      	ldr	r3, [pc, #228]	; (8006748 <UART_SetConfig+0x504>)
 8006664:	fba3 1302 	umull	r1, r3, r3, r2
 8006668:	095b      	lsrs	r3, r3, #5
 800666a:	2164      	movs	r1, #100	; 0x64
 800666c:	fb01 f303 	mul.w	r3, r1, r3
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	011b      	lsls	r3, r3, #4
 8006674:	3332      	adds	r3, #50	; 0x32
 8006676:	4a34      	ldr	r2, [pc, #208]	; (8006748 <UART_SetConfig+0x504>)
 8006678:	fba2 2303 	umull	r2, r3, r2, r3
 800667c:	095b      	lsrs	r3, r3, #5
 800667e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006682:	441c      	add	r4, r3
 8006684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006688:	2200      	movs	r2, #0
 800668a:	673b      	str	r3, [r7, #112]	; 0x70
 800668c:	677a      	str	r2, [r7, #116]	; 0x74
 800668e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006692:	4642      	mov	r2, r8
 8006694:	464b      	mov	r3, r9
 8006696:	1891      	adds	r1, r2, r2
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	415b      	adcs	r3, r3
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066a2:	4641      	mov	r1, r8
 80066a4:	1851      	adds	r1, r2, r1
 80066a6:	6039      	str	r1, [r7, #0]
 80066a8:	4649      	mov	r1, r9
 80066aa:	414b      	adcs	r3, r1
 80066ac:	607b      	str	r3, [r7, #4]
 80066ae:	f04f 0200 	mov.w	r2, #0
 80066b2:	f04f 0300 	mov.w	r3, #0
 80066b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066ba:	4659      	mov	r1, fp
 80066bc:	00cb      	lsls	r3, r1, #3
 80066be:	4651      	mov	r1, sl
 80066c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066c4:	4651      	mov	r1, sl
 80066c6:	00ca      	lsls	r2, r1, #3
 80066c8:	4610      	mov	r0, r2
 80066ca:	4619      	mov	r1, r3
 80066cc:	4603      	mov	r3, r0
 80066ce:	4642      	mov	r2, r8
 80066d0:	189b      	adds	r3, r3, r2
 80066d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80066d4:	464b      	mov	r3, r9
 80066d6:	460a      	mov	r2, r1
 80066d8:	eb42 0303 	adc.w	r3, r2, r3
 80066dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	663b      	str	r3, [r7, #96]	; 0x60
 80066e8:	667a      	str	r2, [r7, #100]	; 0x64
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066f6:	4649      	mov	r1, r9
 80066f8:	008b      	lsls	r3, r1, #2
 80066fa:	4641      	mov	r1, r8
 80066fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006700:	4641      	mov	r1, r8
 8006702:	008a      	lsls	r2, r1, #2
 8006704:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006708:	f7f9 fd86 	bl	8000218 <__aeabi_uldivmod>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4b0d      	ldr	r3, [pc, #52]	; (8006748 <UART_SetConfig+0x504>)
 8006712:	fba3 1302 	umull	r1, r3, r3, r2
 8006716:	095b      	lsrs	r3, r3, #5
 8006718:	2164      	movs	r1, #100	; 0x64
 800671a:	fb01 f303 	mul.w	r3, r1, r3
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	011b      	lsls	r3, r3, #4
 8006722:	3332      	adds	r3, #50	; 0x32
 8006724:	4a08      	ldr	r2, [pc, #32]	; (8006748 <UART_SetConfig+0x504>)
 8006726:	fba2 2303 	umull	r2, r3, r2, r3
 800672a:	095b      	lsrs	r3, r3, #5
 800672c:	f003 020f 	and.w	r2, r3, #15
 8006730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4422      	add	r2, r4
 8006738:	609a      	str	r2, [r3, #8]
}
 800673a:	bf00      	nop
 800673c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006740:	46bd      	mov	sp, r7
 8006742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006746:	bf00      	nop
 8006748:	51eb851f 	.word	0x51eb851f

0800674c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	6812      	ldr	r2, [r2, #0]
 8006764:	f023 0101 	bic.w	r1, r3, #1
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	2b08      	cmp	r3, #8
 8006774:	d102      	bne.n	800677c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006776:	2340      	movs	r3, #64	; 0x40
 8006778:	617b      	str	r3, [r7, #20]
 800677a:	e001      	b.n	8006780 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800677c:	2300      	movs	r3, #0
 800677e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800678c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006792:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006798:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800679e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80067a4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80067aa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80067b0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80067b6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80067bc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80067c2:	4313      	orrs	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
#endif /* FSMC_BCR1_WRAPMOD */
#if defined(FSMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80067e4:	4b20      	ldr	r3, [pc, #128]	; (8006868 <FSMC_NORSRAM_Init+0x11c>)
 80067e6:	60fb      	str	r3, [r7, #12]

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
#endif /* FSMC_BCR1_WRAPMOD */
#if defined(FSMC_BCR1_CCLKEN)
  mask |= FSMC_BCR1_CCLKEN;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067ee:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067f6:	60fb      	str	r3, [r7, #12]
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80067fe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	43db      	mvns	r3, r3
 800680e:	ea02 0103 	and.w	r1, r2, r3
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	4319      	orrs	r1, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006828:	d10c      	bne.n	8006844 <FSMC_NORSRAM_Init+0xf8>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d008      	beq.n	8006844 <FSMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	601a      	str	r2, [r3, #0]
  }
#endif
#if defined(FSMC_BCR1_WFDIS)

  if (Init->NSBank != FSMC_NORSRAM_BANK1)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d006      	beq.n	800685a <FSMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006854:	431a      	orrs	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	601a      	str	r2, [r3, #0]
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	0008fb7f 	.word	0x0008fb7f

0800686c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006882:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	431a      	orrs	r2, r3
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	021b      	lsls	r3, r3, #8
 8006898:	431a      	orrs	r2, r3
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	041b      	lsls	r3, r3, #16
 80068a0:	431a      	orrs	r2, r3
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	051b      	lsls	r3, r3, #20
 80068aa:	431a      	orrs	r2, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	3b02      	subs	r3, #2
 80068b2:	061b      	lsls	r3, r3, #24
 80068b4:	431a      	orrs	r2, r3
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	3201      	adds	r2, #1
 80068c0:	4319      	orrs	r1, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068d4:	d113      	bne.n	80068fe <FSMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FSMC_BTR1_CLKDIV_Pos));
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80068de:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	051b      	lsls	r3, r3, #20
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	431a      	orrs	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	371c      	adds	r7, #28
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006920:	d11d      	bne.n	800695e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800692a:	4b13      	ldr	r3, [pc, #76]	; (8006978 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800692c:	4013      	ands	r3, r2
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	6811      	ldr	r1, [r2, #0]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	6852      	ldr	r2, [r2, #4]
 8006936:	0112      	lsls	r2, r2, #4
 8006938:	4311      	orrs	r1, r2
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	6892      	ldr	r2, [r2, #8]
 800693e:	0212      	lsls	r2, r2, #8
 8006940:	4311      	orrs	r1, r2
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	6992      	ldr	r2, [r2, #24]
 8006946:	4311      	orrs	r1, r2
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	68d2      	ldr	r2, [r2, #12]
 800694c:	0412      	lsls	r2, r2, #16
 800694e:	430a      	orrs	r2, r1
 8006950:	ea43 0102 	orr.w	r1, r3, r2
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800695c:	e005      	b.n	800696a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	cff00000 	.word	0xcff00000

0800697c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f043 0201 	orr.w	r2, r3, #1
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f023 0201 	bic.w	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3301      	adds	r3, #1
 80069d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4a13      	ldr	r2, [pc, #76]	; (8006a24 <USB_FlushTxFifo+0x64>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d901      	bls.n	80069e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e01b      	b.n	8006a18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	daf2      	bge.n	80069ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	019b      	lsls	r3, r3, #6
 80069f0:	f043 0220 	orr.w	r2, r3, #32
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3301      	adds	r3, #1
 80069fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4a08      	ldr	r2, [pc, #32]	; (8006a24 <USB_FlushTxFifo+0x64>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d901      	bls.n	8006a0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e006      	b.n	8006a18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d0f0      	beq.n	80069f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	00030d40 	.word	0x00030d40

08006a28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	3301      	adds	r3, #1
 8006a38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4a11      	ldr	r2, [pc, #68]	; (8006a84 <USB_FlushRxFifo+0x5c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d901      	bls.n	8006a46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e018      	b.n	8006a78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	daf2      	bge.n	8006a34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2210      	movs	r2, #16
 8006a56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4a08      	ldr	r2, [pc, #32]	; (8006a84 <USB_FlushRxFifo+0x5c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d901      	bls.n	8006a6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e006      	b.n	8006a78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	f003 0310 	and.w	r3, r3, #16
 8006a72:	2b10      	cmp	r3, #16
 8006a74:	d0f0      	beq.n	8006a58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	00030d40 	.word	0x00030d40

08006a88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b08b      	sub	sp, #44	; 0x2c
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	4613      	mov	r3, r2
 8006a94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a9e:	88fb      	ldrh	r3, [r7, #6]
 8006aa0:	089b      	lsrs	r3, r3, #2
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006aa6:	88fb      	ldrh	r3, [r7, #6]
 8006aa8:	f003 0303 	and.w	r3, r3, #3
 8006aac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006aae:	2300      	movs	r3, #0
 8006ab0:	623b      	str	r3, [r7, #32]
 8006ab2:	e014      	b.n	8006ade <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	3301      	adds	r3, #1
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	3301      	adds	r3, #1
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	3301      	adds	r3, #1
 8006adc:	623b      	str	r3, [r7, #32]
 8006ade:	6a3a      	ldr	r2, [r7, #32]
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d3e6      	bcc.n	8006ab4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ae6:	8bfb      	ldrh	r3, [r7, #30]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d01e      	beq.n	8006b2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af6:	461a      	mov	r2, r3
 8006af8:	f107 0310 	add.w	r3, r7, #16
 8006afc:	6812      	ldr	r2, [r2, #0]
 8006afe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	701a      	strb	r2, [r3, #0]
      i++;
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	3301      	adds	r3, #1
 8006b16:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006b1e:	8bfb      	ldrh	r3, [r7, #30]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b24:	8bfb      	ldrh	r3, [r7, #30]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1ea      	bne.n	8006b00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	372c      	adds	r7, #44	; 0x2c
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b50:	68fb      	ldr	r3, [r7, #12]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	460b      	mov	r3, r1
 8006b84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b98:	f023 0303 	bic.w	r3, r3, #3
 8006b9c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	78fb      	ldrb	r3, [r7, #3]
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	68f9      	ldr	r1, [r7, #12]
 8006bae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d107      	bne.n	8006bcc <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006bc8:	6053      	str	r3, [r2, #4]
 8006bca:	e009      	b.n	8006be0 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d106      	bne.n	8006be0 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bd8:	461a      	mov	r2, r3
 8006bda:	f241 7370 	movw	r3, #6000	; 0x1770
 8006bde:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	b29b      	uxth	r3, r3
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b089      	sub	sp, #36	; 0x24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006c20:	78fb      	ldrb	r3, [r7, #3]
 8006c22:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	0c9b      	lsrs	r3, r3, #18
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	0fdb      	lsrs	r3, r3, #31
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 0320 	and.w	r3, r3, #32
 8006c5c:	2b20      	cmp	r3, #32
 8006c5e:	d104      	bne.n	8006c6a <USB_HC_Halt+0x5a>
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	e0c8      	b.n	8006dfc <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <USB_HC_Halt+0x66>
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d163      	bne.n	8006d3e <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	0151      	lsls	r1, r2, #5
 8006c88:	69fa      	ldr	r2, [r7, #28]
 8006c8a:	440a      	add	r2, r1
 8006c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c94:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f040 80ab 	bne.w	8006dfa <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d133      	bne.n	8006d18 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	0151      	lsls	r1, r2, #5
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	440a      	add	r2, r1
 8006cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cce:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	0151      	lsls	r1, r2, #5
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	440a      	add	r2, r1
 8006ce6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cee:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cfc:	d81d      	bhi.n	8006d3a <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d14:	d0ec      	beq.n	8006cf0 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d16:	e070      	b.n	8006dfa <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	0151      	lsls	r1, r2, #5
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	440a      	add	r2, r1
 8006d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d36:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d38:	e05f      	b.n	8006dfa <USB_HC_Halt+0x1ea>
            break;
 8006d3a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d3c:	e05d      	b.n	8006dfa <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	0151      	lsls	r1, r2, #5
 8006d50:	69fa      	ldr	r2, [r7, #28]
 8006d52:	440a      	add	r2, r1
 8006d54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d5c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d133      	bne.n	8006dd6 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	0151      	lsls	r1, r2, #5
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	440a      	add	r2, r1
 8006d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d8c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	0151      	lsls	r1, r2, #5
 8006da0:	69fa      	ldr	r2, [r7, #28]
 8006da2:	440a      	add	r2, r1
 8006da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dac:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3301      	adds	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dba:	d81d      	bhi.n	8006df8 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dd2:	d0ec      	beq.n	8006dae <USB_HC_Halt+0x19e>
 8006dd4:	e011      	b.n	8006dfa <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	0151      	lsls	r1, r2, #5
 8006de8:	69fa      	ldr	r2, [r7, #28]
 8006dea:	440a      	add	r2, r1
 8006dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	e000      	b.n	8006dfa <USB_HC_Halt+0x1ea>
          break;
 8006df8:	bf00      	nop
    }
  }

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3724      	adds	r7, #36	; 0x24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b088      	sub	sp, #32
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff fdbe 	bl	800699e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e22:	2110      	movs	r1, #16
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7ff fdcb 	bl	80069c0 <USB_FlushTxFifo>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff fdf7 	bl	8006a28 <USB_FlushRxFifo>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006e44:	2300      	movs	r3, #0
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	e01f      	b.n	8006e8a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e68:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e70:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7e:	461a      	mov	r2, r3
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	3301      	adds	r3, #1
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	2b0f      	cmp	r3, #15
 8006e8e:	d9dc      	bls.n	8006e4a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006e90:	2300      	movs	r3, #0
 8006e92:	61bb      	str	r3, [r7, #24]
 8006e94:	e034      	b.n	8006f00 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006eb4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ebc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eca:	461a      	mov	r2, r3
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006edc:	d80c      	bhi.n	8006ef8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ef4:	d0ec      	beq.n	8006ed0 <USB_StopHost+0xc8>
 8006ef6:	e000      	b.n	8006efa <USB_StopHost+0xf2>
        break;
 8006ef8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	3301      	adds	r3, #1
 8006efe:	61bb      	str	r3, [r7, #24]
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	2b0f      	cmp	r3, #15
 8006f04:	d9c7      	bls.n	8006e96 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f12:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff fd2d 	bl	800697c <USB_EnableGlobalInt>

  return ret;
 8006f22:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3720      	adds	r7, #32
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f804 	bl	8006f50 <USBH_HandleSof>
}
 8006f48:	bf00      	nop
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b0b      	cmp	r3, #11
 8006f60:	d10a      	bne.n	8006f78 <USBH_HandleSof+0x28>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
  }
}
 8006f78:	bf00      	nop
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006f90:	bf00      	nop
}
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006fac:	bf00      	nop
}
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f883 	bl	8007112 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	791b      	ldrb	r3, [r3, #4]
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f80b 	bl	800702e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	795b      	ldrb	r3, [r3, #5]
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f805 	bl	800702e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800702e:	b480      	push	{r7}
 8007030:	b083      	sub	sp, #12
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800703a:	78fb      	ldrb	r3, [r7, #3]
 800703c:	2b0f      	cmp	r3, #15
 800703e:	d80d      	bhi.n	800705c <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	33e0      	adds	r3, #224	; 0xe0
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	78fb      	ldrb	r3, [r7, #3]
 800704e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007052:	6879      	ldr	r1, [r7, #4]
 8007054:	33e0      	adds	r3, #224	; 0xe0
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b082      	sub	sp, #8
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007078:	4618      	mov	r0, r3
 800707a:	f7ff ff57 	bl	8006f2c <USBH_LL_IncTimer>
}
 800707e:	bf00      	nop
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b082      	sub	sp, #8
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007094:	4618      	mov	r0, r3
 8007096:	f7ff ff8f 	bl	8006fb8 <USBH_LL_Connect>
}
 800709a:	bf00      	nop
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7ff ff98 	bl	8006fe6 <USBH_LL_Disconnect>
}
 80070b6:	bf00      	nop
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	460b      	mov	r3, r1
 80070c8:	70fb      	strb	r3, [r7, #3]
 80070ca:	4613      	mov	r3, r2
 80070cc:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7ff ff49 	bl	8006f80 <USBH_LL_PortEnabled>
}
 80070ee:	bf00      	nop
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff ff49 	bl	8006f9c <USBH_LL_PortDisabled>
}
 800710a:	bf00      	nop
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007128:	4618      	mov	r0, r3
 800712a:	f7fb fedd 	bl	8002ee8 <HAL_HCD_Stop>
 800712e:	4603      	mov	r3, r0
 8007130:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007132:	7bfb      	ldrb	r3, [r7, #15]
 8007134:	4618      	mov	r0, r3
 8007136:	f000 f807 	bl	8007148 <USBH_Get_USB_Status>
 800713a:	4603      	mov	r3, r0
 800713c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800713e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	4603      	mov	r3, r0
 8007150:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	2b03      	cmp	r3, #3
 800715a:	d817      	bhi.n	800718c <USBH_Get_USB_Status+0x44>
 800715c:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <USBH_Get_USB_Status+0x1c>)
 800715e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007162:	bf00      	nop
 8007164:	08007175 	.word	0x08007175
 8007168:	0800717b 	.word	0x0800717b
 800716c:	08007181 	.word	0x08007181
 8007170:	08007187 	.word	0x08007187
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	73fb      	strb	r3, [r7, #15]
    break;
 8007178:	e00b      	b.n	8007192 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800717a:	2302      	movs	r3, #2
 800717c:	73fb      	strb	r3, [r7, #15]
    break;
 800717e:	e008      	b.n	8007192 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007180:	2301      	movs	r3, #1
 8007182:	73fb      	strb	r3, [r7, #15]
    break;
 8007184:	e005      	b.n	8007192 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007186:	2302      	movs	r3, #2
 8007188:	73fb      	strb	r3, [r7, #15]
    break;
 800718a:	e002      	b.n	8007192 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800718c:	2302      	movs	r3, #2
 800718e:	73fb      	strb	r3, [r7, #15]
    break;
 8007190:	bf00      	nop
  }
  return usb_status;
 8007192:	7bfb      	ldrb	r3, [r7, #15]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <__libc_init_array>:
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	4d0d      	ldr	r5, [pc, #52]	; (80071d8 <__libc_init_array+0x38>)
 80071a4:	4c0d      	ldr	r4, [pc, #52]	; (80071dc <__libc_init_array+0x3c>)
 80071a6:	1b64      	subs	r4, r4, r5
 80071a8:	10a4      	asrs	r4, r4, #2
 80071aa:	2600      	movs	r6, #0
 80071ac:	42a6      	cmp	r6, r4
 80071ae:	d109      	bne.n	80071c4 <__libc_init_array+0x24>
 80071b0:	4d0b      	ldr	r5, [pc, #44]	; (80071e0 <__libc_init_array+0x40>)
 80071b2:	4c0c      	ldr	r4, [pc, #48]	; (80071e4 <__libc_init_array+0x44>)
 80071b4:	f000 f820 	bl	80071f8 <_init>
 80071b8:	1b64      	subs	r4, r4, r5
 80071ba:	10a4      	asrs	r4, r4, #2
 80071bc:	2600      	movs	r6, #0
 80071be:	42a6      	cmp	r6, r4
 80071c0:	d105      	bne.n	80071ce <__libc_init_array+0x2e>
 80071c2:	bd70      	pop	{r4, r5, r6, pc}
 80071c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c8:	4798      	blx	r3
 80071ca:	3601      	adds	r6, #1
 80071cc:	e7ee      	b.n	80071ac <__libc_init_array+0xc>
 80071ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d2:	4798      	blx	r3
 80071d4:	3601      	adds	r6, #1
 80071d6:	e7f2      	b.n	80071be <__libc_init_array+0x1e>
 80071d8:	08007230 	.word	0x08007230
 80071dc:	08007230 	.word	0x08007230
 80071e0:	08007230 	.word	0x08007230
 80071e4:	08007234 	.word	0x08007234

080071e8 <memset>:
 80071e8:	4402      	add	r2, r0
 80071ea:	4603      	mov	r3, r0
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d100      	bne.n	80071f2 <memset+0xa>
 80071f0:	4770      	bx	lr
 80071f2:	f803 1b01 	strb.w	r1, [r3], #1
 80071f6:	e7f9      	b.n	80071ec <memset+0x4>

080071f8 <_init>:
 80071f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fa:	bf00      	nop
 80071fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fe:	bc08      	pop	{r3}
 8007200:	469e      	mov	lr, r3
 8007202:	4770      	bx	lr

08007204 <_fini>:
 8007204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007206:	bf00      	nop
 8007208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720a:	bc08      	pop	{r3}
 800720c:	469e      	mov	lr, r3
 800720e:	4770      	bx	lr
